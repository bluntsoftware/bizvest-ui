{"ast":null,"code":"/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n/**\n * Helpers\n */\n\n\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nconst getEscapeReplacement = ch => escapeReplacements[ch];\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n/**\n * @param {string} html\n */\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\n\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n/**\n * @param {string} base\n * @param {string} href\n */\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = {\n  exec: function noopTest() {}\n};\n\nfunction merge(obj) {\n  let i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false,\n        curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n        cells = row.split(/ \\|/);\n  let i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\n\n\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  let suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  const l = str.length;\n  let level = 0,\n      i = 0;\n\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n} // copied from https://stackoverflow.com/a/5450113/806777\n\n/**\n * @param {string} pattern\n * @param {number} count\n */\n\n\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n\n  let result = '';\n\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n\n    count >>= 1;\n    pattern += pattern;\n  }\n\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n\n    if (matchIndentInNode === null) {\n      return node;\n    }\n\n    const [indentInNode] = matchIndentInNode;\n\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\n\n\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n\n    if (cap) {\n      let text = cap[2].trim(); // remove trailing #s\n\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      } // Get next list item\n\n\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`); // Check if current bullet point can start a new List Item\n\n      while (src) {\n        endEarly = false;\n\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, t => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`); // Check if following lines should be included in List Item\n\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine; // Re-align to follow commonmark nesting rules\n\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            } // End list item if found code fences\n\n\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            } // End list item if found start of new heading\n\n\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            } // End list item if found start of new bullet\n\n\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            } // Horizontal rule found\n\n\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              } // paragraph continuation unless last line was a different block level element\n\n\n              if (line.search(/[^ ]/) >= 4) {\n                // indented code block\n                break;\n              }\n\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        } // Check for task list items\n\n\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      } // Set all items to loose if list is loose\n\n\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        } // parse child tokens inside headers and cells\n        // header child tokens\n\n\n        l = item.header.length;\n\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        } // cell child tokens\n\n\n        l = item.rows.length;\n\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        } // ending angle bracket cannot be escaped\n\n\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n\n      let href = cap[2];\n      let title = '';\n\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n        // Remove extra characters. *a*** -> *a*\n\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength); // Create `em` if smallest delimiter has odd char count. *a***\n\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n\n    if (cap) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n\n        text = escape(cap[0]);\n\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n\n    if (cap) {\n      let text;\n\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n}\n/**\n * Block-Level Grammar\n */\n\n\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n});\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\n\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n}; // list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\n\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g; // lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\n\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * smartypants text replacement\n * @param {string} text\n */\n\nfunction smartypants(text) {\n  return text // em-dashes\n  .replace(/---/g, '\\u2014') // en-dashes\n  .replace(/--/g, '\\u2013') // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018') // closing singles & apostrophes\n  .replace(/'/g, '\\u2019') // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c') // closing doubles\n  .replace(/\"/g, '\\u201d') // ellipses\n  .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n * @param {string} text\n */\n\n\nfunction mangle(text) {\n  let out = '',\n      i,\n      ch;\n  const l = text.length;\n\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n/**\n * Block Lexer\n */\n\n\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n\n\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n\n\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n\n\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n\n\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    let next;\n\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n  /**\n   * Lexing\n   */\n\n\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // newline\n\n\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // fences\n\n\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // heading\n\n\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // hr\n\n\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // blockquote\n\n\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // list\n\n\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // html\n\n\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // def\n\n\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n\n        continue;\n      } // table (gfm)\n\n\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // lheading\n\n\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      } // text\n\n\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n\n\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar; // Mask out reflinks\n\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    } // Mask out other blocks\n\n\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    } // Mask out escaped em & strong delimiters\n\n\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n\n      keepPrevChar = false; // extensions\n\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // escape\n\n\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // tag\n\n\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // link\n\n\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // reflink, nolink\n\n\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // em & strong\n\n\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // br\n\n\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // del (gfm)\n\n\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // autolink\n\n\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n}\n/**\n * Renderer\n */\n\n\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n  /**\n   * @param {string} quote\n   */\n\n\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    } // ignore IDs\n\n\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n\n\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n  /**\n   * @param {string} content\n   */\n\n\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n\n\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  }\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n\n}\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\n\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n\n}\n/**\n * Slugger generates header id\n */\n\n\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n  /**\n   * @param {string} value\n   */\n\n\n  serialize(value) {\n    return value.toLowerCase().trim() // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n\n\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n\n    return slug;\n  }\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n\n\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n\n}\n/**\n * Parsing & Compiling\n */\n\n\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n\n\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n\n\n  parse(tokens, top = true) {\n    let out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n\n        case 'table':\n          {\n            header = ''; // header\n\n            cell = '';\n            l2 = token.header.length;\n\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n\n              body += this.renderer.tablerow(cell);\n            }\n\n            out += this.renderer.table(header, body);\n            continue;\n          }\n\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n\n        case 'html':\n          {\n            // TODO parse inline content if parameter markdown=1\n            out += this.renderer.html(token.text);\n            continue;\n          }\n\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n\n\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n        i,\n        token,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n\n}\n/**\n * Marked\n */\n\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function (err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    let pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => {\n          return Parser.parse(tokens, opt);\n        }).catch(onError);\n      }\n\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n/**\n * Options\n */\n\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n/**\n * Use Extension\n */\n\nmarked.use = function (...args) {\n  const extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  args.forEach(pack => {\n    // copy options to new object\n    const opts = merge({}, pack); // set async to true if it was set to true before\n\n    opts.async = marked.defaults.async || opts.async; // ==-- Parse \"addon\" extensions --== //\n\n    if (pack.extensions) {\n      pack.extensions.forEach(ext => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n\n        if (ext.renderer) {\n          // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function (...args) {\n              let ret = ext.renderer.apply(this, args);\n\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    } // ==-- Parse \"overwrite\" extensions --== //\n\n\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\n\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n\n          return ret;\n        };\n      }\n\n      opts.renderer = renderer;\n    }\n\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\n\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n\n          return ret;\n        };\n      }\n\n      opts.tokenizer = tokenizer;\n    } // ==-- Parse WalkTokens extensions --== //\n\n\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n\n      opts.walkTokens = function (token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n/**\n * Run callback for every token\n */\n\n\nmarked.walkTokens = function (tokens, callback) {\n  let values = [];\n\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n\n    switch (token.type) {\n      case 'table':\n        {\n          for (const cell of token.header) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(marked.walkTokens(cell.tokens, callback));\n            }\n          }\n\n          break;\n        }\n\n      case 'list':\n        {\n          values = values.concat(marked.walkTokens(token.items, callback));\n          break;\n        }\n\n      default:\n        {\n          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n            // Walk any extensions\n            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n              values = values.concat(marked.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(marked.walkTokens(token.tokens, callback));\n          }\n        }\n    }\n  }\n\n  return values;\n};\n/**\n * Parse Inline\n * @param {string} src\n */\n\n\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n};\n/**\n * Expose\n */\n\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","constructor","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","marked","callback","done","err","pending","setTimeout","onError","message","Promise","all","then","catch","setOptions","use","args","childTokens","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","values","concat"],"sources":["D:/dev/bizvest/bizvest-ui/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens))\n          .then(() => {\n            return Parser.parse(tokens, opt);\n          })\n          .catch(onError);\n      }\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA,SAASA,WAAT,GAAuB;EACrB,OAAO;IACLC,KAAK,EAAE,KADF;IAELC,OAAO,EAAE,IAFJ;IAGLC,MAAM,EAAE,KAHH;IAILC,UAAU,EAAE,IAJP;IAKLC,GAAG,EAAE,IALA;IAMLC,SAAS,EAAE,IANN;IAOLC,YAAY,EAAE,EAPT;IAQLC,SAAS,EAAE,IARN;IASLC,UAAU,EAAE,WATP;IAULC,MAAM,EAAE,IAVH;IAWLC,QAAQ,EAAE,KAXL;IAYLC,QAAQ,EAAE,IAZL;IAaLC,QAAQ,EAAE,KAbL;IAcLC,SAAS,EAAE,IAdN;IAeLC,MAAM,EAAE,KAfH;IAgBLC,WAAW,EAAE,KAhBR;IAiBLC,SAAS,EAAE,IAjBN;IAkBLC,UAAU,EAAE,IAlBP;IAmBLC,KAAK,EAAE;EAnBF,CAAP;AAqBD;;AAED,IAAIC,QAAQ,GAAGpB,WAAW,EAA1B;;AAEA,SAASqB,cAAT,CAAwBC,WAAxB,EAAqC;EACnCF,QAAQ,GAAGE,WAAX;AACD;AAED;AACA;AACA;;;AACA,MAAMC,UAAU,GAAG,SAAnB;AACA,MAAMC,aAAa,GAAG,IAAIC,MAAJ,CAAWF,UAAU,CAACG,MAAtB,EAA8B,GAA9B,CAAtB;AACA,MAAMC,kBAAkB,GAAG,mDAA3B;AACA,MAAMC,qBAAqB,GAAG,IAAIH,MAAJ,CAAWE,kBAAkB,CAACD,MAA9B,EAAsC,GAAtC,CAA9B;AACA,MAAMG,kBAAkB,GAAG;EACzB,KAAK,OADoB;EAEzB,KAAK,MAFoB;EAGzB,KAAK,MAHoB;EAIzB,KAAK,QAJoB;EAKzB,KAAK;AALoB,CAA3B;;AAOA,MAAMC,oBAAoB,GAAIC,EAAD,IAAQF,kBAAkB,CAACE,EAAD,CAAvD;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,MAAtB,EAA8B;EAC5B,IAAIA,MAAJ,EAAY;IACV,IAAIX,UAAU,CAACY,IAAX,CAAgBF,IAAhB,CAAJ,EAA2B;MACzB,OAAOA,IAAI,CAACG,OAAL,CAAaZ,aAAb,EAA4BM,oBAA5B,CAAP;IACD;EACF,CAJD,MAIO;IACL,IAAIH,kBAAkB,CAACQ,IAAnB,CAAwBF,IAAxB,CAAJ,EAAmC;MACjC,OAAOA,IAAI,CAACG,OAAL,CAAaR,qBAAb,EAAoCE,oBAApC,CAAP;IACD;EACF;;EAED,OAAOG,IAAP;AACD;;AAED,MAAMI,YAAY,GAAG,4CAArB;AAEA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBL,IAAlB,EAAwB;EACtB;EACA,OAAOA,IAAI,CAACG,OAAL,CAAaC,YAAb,EAA2B,CAACE,CAAD,EAAIC,CAAJ,KAAU;IAC1CA,CAAC,GAAGA,CAAC,CAACC,WAAF,EAAJ;IACA,IAAID,CAAC,KAAK,OAAV,EAAmB,OAAO,GAAP;;IACnB,IAAIA,CAAC,CAACE,MAAF,CAAS,CAAT,MAAgB,GAApB,EAAyB;MACvB,OAAOF,CAAC,CAACE,MAAF,CAAS,CAAT,MAAgB,GAAhB,GACHC,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACL,CAAC,CAACM,SAAF,CAAY,CAAZ,CAAD,EAAiB,EAAjB,CAA5B,CADG,GAEHH,MAAM,CAACC,YAAP,CAAoB,CAACJ,CAAC,CAACM,SAAF,CAAY,CAAZ,CAArB,CAFJ;IAGD;;IACD,OAAO,EAAP;EACD,CATM,CAAP;AAUD;;AAED,MAAMC,KAAK,GAAG,cAAd;AAEA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0B;EACxBD,KAAK,GAAG,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACvB,MAAlD;EACAwB,GAAG,GAAGA,GAAG,IAAI,EAAb;EACA,MAAMC,GAAG,GAAG;IACVf,OAAO,EAAE,CAACgB,IAAD,EAAOC,GAAP,KAAe;MACtBA,GAAG,GAAGA,GAAG,CAAC3B,MAAJ,IAAc2B,GAApB;MACAA,GAAG,GAAGA,GAAG,CAACjB,OAAJ,CAAYW,KAAZ,EAAmB,IAAnB,CAAN;MACAE,KAAK,GAAGA,KAAK,CAACb,OAAN,CAAcgB,IAAd,EAAoBC,GAApB,CAAR;MACA,OAAOF,GAAP;IACD,CANS;IAOVG,QAAQ,EAAE,MAAM;MACd,OAAO,IAAI7B,MAAJ,CAAWwB,KAAX,EAAkBC,GAAlB,CAAP;IACD;EATS,CAAZ;EAWA,OAAOC,GAAP;AACD;;AAED,MAAMI,mBAAmB,GAAG,SAA5B;AACA,MAAMC,oBAAoB,GAAG,+BAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkB5C,QAAlB,EAA4B6C,IAA5B,EAAkCC,IAAlC,EAAwC;EACtC,IAAI9C,QAAJ,EAAc;IACZ,IAAI+C,IAAJ;;IACA,IAAI;MACFA,IAAI,GAAGC,kBAAkB,CAACvB,QAAQ,CAACqB,IAAD,CAAT,CAAlB,CACJvB,OADI,CACImB,mBADJ,EACyB,EADzB,EAEJd,WAFI,EAAP;IAGD,CAJD,CAIE,OAAOqB,CAAP,EAAU;MACV,OAAO,IAAP;IACD;;IACD,IAAIF,IAAI,CAACG,OAAL,CAAa,aAAb,MAAgC,CAAhC,IAAqCH,IAAI,CAACG,OAAL,CAAa,WAAb,MAA8B,CAAnE,IAAwEH,IAAI,CAACG,OAAL,CAAa,OAAb,MAA0B,CAAtG,EAAyG;MACvG,OAAO,IAAP;IACD;EACF;;EACD,IAAIL,IAAI,IAAI,CAACF,oBAAoB,CAACrB,IAArB,CAA0BwB,IAA1B,CAAb,EAA8C;IAC5CA,IAAI,GAAGK,UAAU,CAACN,IAAD,EAAOC,IAAP,CAAjB;EACD;;EACD,IAAI;IACFA,IAAI,GAAGM,SAAS,CAACN,IAAD,CAAT,CAAgBvB,OAAhB,CAAwB,MAAxB,EAAgC,GAAhC,CAAP;EACD,CAFD,CAEE,OAAO0B,CAAP,EAAU;IACV,OAAO,IAAP;EACD;;EACD,OAAOH,IAAP;AACD;;AAED,MAAMO,QAAQ,GAAG,EAAjB;AACA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,QAAQ,GAAG,mBAAjB;AACA,MAAMC,MAAM,GAAG,2BAAf;AAEA;AACA;AACA;AACA;;AACA,SAASL,UAAT,CAAoBN,IAApB,EAA0BC,IAA1B,EAAgC;EAC9B,IAAI,CAACO,QAAQ,CAAC,MAAMR,IAAP,CAAb,EAA2B;IACzB;IACA;IACA;IACA,IAAIS,UAAU,CAAChC,IAAX,CAAgBuB,IAAhB,CAAJ,EAA2B;MACzBQ,QAAQ,CAAC,MAAMR,IAAP,CAAR,GAAuBA,IAAI,GAAG,GAA9B;IACD,CAFD,MAEO;MACLQ,QAAQ,CAAC,MAAMR,IAAP,CAAR,GAAuBY,KAAK,CAACZ,IAAD,EAAO,GAAP,EAAY,IAAZ,CAA5B;IACD;EACF;;EACDA,IAAI,GAAGQ,QAAQ,CAAC,MAAMR,IAAP,CAAf;EACA,MAAMa,YAAY,GAAGb,IAAI,CAACK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA5C;;EAEA,IAAIJ,IAAI,CAACb,SAAL,CAAe,CAAf,EAAkB,CAAlB,MAAyB,IAA7B,EAAmC;IACjC,IAAIyB,YAAJ,EAAkB;MAChB,OAAOZ,IAAP;IACD;;IACD,OAAOD,IAAI,CAACtB,OAAL,CAAagC,QAAb,EAAuB,IAAvB,IAA+BT,IAAtC;EACD,CALD,MAKO,IAAIA,IAAI,CAACjB,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;IACjC,IAAI6B,YAAJ,EAAkB;MAChB,OAAOZ,IAAP;IACD;;IACD,OAAOD,IAAI,CAACtB,OAAL,CAAaiC,MAAb,EAAqB,IAArB,IAA6BV,IAApC;EACD,CALM,MAKA;IACL,OAAOD,IAAI,GAAGC,IAAd;EACD;AACF;;AAED,MAAMa,QAAQ,GAAG;EAAEC,IAAI,EAAE,SAASD,QAAT,GAAoB,CAAE;AAA9B,CAAjB;;AAEA,SAASE,KAAT,CAAevB,GAAf,EAAoB;EAClB,IAAIwB,CAAC,GAAG,CAAR;EAAA,IACEC,MADF;EAAA,IAEEC,GAFF;;EAIA,OAAOF,CAAC,GAAGG,SAAS,CAACC,MAArB,EAA6BJ,CAAC,EAA9B,EAAkC;IAChCC,MAAM,GAAGE,SAAS,CAACH,CAAD,CAAlB;;IACA,KAAKE,GAAL,IAAYD,MAAZ,EAAoB;MAClB,IAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;QACrD1B,GAAG,CAAC0B,GAAD,CAAH,GAAWD,MAAM,CAACC,GAAD,CAAjB;MACD;IACF;EACF;;EAED,OAAO1B,GAAP;AACD;;AAED,SAASiC,UAAT,CAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;EACnC;EACA;EACA,MAAMC,GAAG,GAAGF,QAAQ,CAACjD,OAAT,CAAiB,KAAjB,EAAwB,CAACoD,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,KAAwB;IACxD,IAAIC,OAAO,GAAG,KAAd;IAAA,IACEC,IAAI,GAAGH,MADT;;IAEA,OAAO,EAAEG,IAAF,IAAU,CAAV,IAAeF,GAAG,CAACE,IAAD,CAAH,KAAc,IAApC,EAA0CD,OAAO,GAAG,CAACA,OAAX;;IAC1C,IAAIA,OAAJ,EAAa;MACX;MACA;MACA,OAAO,GAAP;IACD,CAJD,MAIO;MACL;MACA,OAAO,IAAP;IACD;EACF,CAZS,CAAZ;EAAA,MAaEE,KAAK,GAAGN,GAAG,CAACO,KAAJ,CAAU,KAAV,CAbV;EAcA,IAAInB,CAAC,GAAG,CAAR,CAjBmC,CAmBnC;;EACA,IAAI,CAACkB,KAAK,CAAC,CAAD,CAAL,CAASE,IAAT,EAAL,EAAsB;IAAEF,KAAK,CAACG,KAAN;EAAgB;;EACxC,IAAIH,KAAK,CAACd,MAAN,GAAe,CAAf,IAAoB,CAACc,KAAK,CAACA,KAAK,CAACd,MAAN,GAAe,CAAhB,CAAL,CAAwBgB,IAAxB,EAAzB,EAAyD;IAAEF,KAAK,CAACI,GAAN;EAAc;;EAEzE,IAAIJ,KAAK,CAACd,MAAN,GAAeO,KAAnB,EAA0B;IACxBO,KAAK,CAACK,MAAN,CAAaZ,KAAb;EACD,CAFD,MAEO;IACL,OAAOO,KAAK,CAACd,MAAN,GAAeO,KAAtB,EAA6BO,KAAK,CAACM,IAAN,CAAW,EAAX;EAC9B;;EAED,OAAOxB,CAAC,GAAGkB,KAAK,CAACd,MAAjB,EAAyBJ,CAAC,EAA1B,EAA8B;IAC5B;IACAkB,KAAK,CAAClB,CAAD,CAAL,GAAWkB,KAAK,CAAClB,CAAD,CAAL,CAASoB,IAAT,GAAgB3D,OAAhB,CAAwB,OAAxB,EAAiC,GAAjC,CAAX;EACD;;EACD,OAAOyD,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASvB,KAAT,CAAeoB,GAAf,EAAoBU,CAApB,EAAuBC,MAAvB,EAA+B;EAC7B,MAAMC,CAAC,GAAGZ,GAAG,CAACX,MAAd;;EACA,IAAIuB,CAAC,KAAK,CAAV,EAAa;IACX,OAAO,EAAP;EACD,CAJ4B,CAM7B;;;EACA,IAAIC,OAAO,GAAG,CAAd,CAP6B,CAS7B;;EACA,OAAOA,OAAO,GAAGD,CAAjB,EAAoB;IAClB,MAAME,QAAQ,GAAGd,GAAG,CAAChD,MAAJ,CAAW4D,CAAC,GAAGC,OAAJ,GAAc,CAAzB,CAAjB;;IACA,IAAIC,QAAQ,KAAKJ,CAAb,IAAkB,CAACC,MAAvB,EAA+B;MAC7BE,OAAO;IACR,CAFD,MAEO,IAAIC,QAAQ,KAAKJ,CAAb,IAAkBC,MAAtB,EAA8B;MACnCE,OAAO;IACR,CAFM,MAEA;MACL;IACD;EACF;;EAED,OAAOb,GAAG,CAACe,KAAJ,CAAU,CAAV,EAAaH,CAAC,GAAGC,OAAjB,CAAP;AACD;;AAED,SAASG,kBAAT,CAA4BhB,GAA5B,EAAiCiB,CAAjC,EAAoC;EAClC,IAAIjB,GAAG,CAAC3B,OAAJ,CAAY4C,CAAC,CAAC,CAAD,CAAb,MAAsB,CAAC,CAA3B,EAA8B;IAC5B,OAAO,CAAC,CAAR;EACD;;EACD,MAAML,CAAC,GAAGZ,GAAG,CAACX,MAAd;EACA,IAAI6B,KAAK,GAAG,CAAZ;EAAA,IACEjC,CAAC,GAAG,CADN;;EAEA,OAAOA,CAAC,GAAG2B,CAAX,EAAc3B,CAAC,EAAf,EAAmB;IACjB,IAAIe,GAAG,CAACf,CAAD,CAAH,KAAW,IAAf,EAAqB;MACnBA,CAAC;IACF,CAFD,MAEO,IAAIe,GAAG,CAACf,CAAD,CAAH,KAAWgC,CAAC,CAAC,CAAD,CAAhB,EAAqB;MAC1BC,KAAK;IACN,CAFM,MAEA,IAAIlB,GAAG,CAACf,CAAD,CAAH,KAAWgC,CAAC,CAAC,CAAD,CAAhB,EAAqB;MAC1BC,KAAK;;MACL,IAAIA,KAAK,GAAG,CAAZ,EAAe;QACb,OAAOjC,CAAP;MACD;IACF;EACF;;EACD,OAAO,CAAC,CAAR;AACD;;AAED,SAASkC,wBAAT,CAAkC3D,GAAlC,EAAuC;EACrC,IAAIA,GAAG,IAAIA,GAAG,CAACrC,QAAX,IAAuB,CAACqC,GAAG,CAACnC,MAAhC,EAAwC;IACtC+F,OAAO,CAACC,IAAR,CAAa,yMAAb;EACD;AACF,C,CAED;;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B3B,KAA/B,EAAsC;EACpC,IAAIA,KAAK,GAAG,CAAZ,EAAe;IACb,OAAO,EAAP;EACD;;EACD,IAAI4B,MAAM,GAAG,EAAb;;EACA,OAAO5B,KAAK,GAAG,CAAf,EAAkB;IAChB,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb4B,MAAM,IAAID,OAAV;IACD;;IACD3B,KAAK,KAAK,CAAV;IACA2B,OAAO,IAAIA,OAAX;EACD;;EACD,OAAOC,MAAM,GAAGD,OAAhB;AACD;;AAED,SAASE,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2C;EACzC,MAAM5D,IAAI,GAAG0D,IAAI,CAAC1D,IAAlB;EACA,MAAM6D,KAAK,GAAGH,IAAI,CAACG,KAAL,GAAaxF,MAAM,CAACqF,IAAI,CAACG,KAAN,CAAnB,GAAkC,IAAhD;EACA,MAAMC,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,aAAf,EAA8B,IAA9B,CAAb;;EAEA,IAAIgF,GAAG,CAAC,CAAD,CAAH,CAAO1E,MAAP,CAAc,CAAd,MAAqB,GAAzB,EAA8B;IAC5B6E,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqB,IAArB;IACA,MAAMC,KAAK,GAAG;MACZC,IAAI,EAAE,MADM;MAEZP,GAFY;MAGZ3D,IAHY;MAIZ6D,KAJY;MAKZC,IALY;MAMZK,MAAM,EAAEP,KAAK,CAACQ,YAAN,CAAmBN,IAAnB;IANI,CAAd;IAQAF,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqB,KAArB;IACA,OAAOC,KAAP;EACD;;EACD,OAAO;IACLC,IAAI,EAAE,OADD;IAELP,GAFK;IAGL3D,IAHK;IAIL6D,KAJK;IAKLC,IAAI,EAAEzF,MAAM,CAACyF,IAAD;EALP,CAAP;AAOD;;AAED,SAASO,sBAAT,CAAgCV,GAAhC,EAAqCG,IAArC,EAA2C;EACzC,MAAMQ,iBAAiB,GAAGX,GAAG,CAAC9B,KAAJ,CAAU,eAAV,CAA1B;;EAEA,IAAIyC,iBAAiB,KAAK,IAA1B,EAAgC;IAC9B,OAAOR,IAAP;EACD;;EAED,MAAMS,YAAY,GAAGD,iBAAiB,CAAC,CAAD,CAAtC;EAEA,OAAOR,IAAI,CACR3B,KADI,CACE,IADF,EAEJqC,GAFI,CAEAC,IAAI,IAAI;IACX,MAAMC,iBAAiB,GAAGD,IAAI,CAAC5C,KAAL,CAAW,MAAX,CAA1B;;IACA,IAAI6C,iBAAiB,KAAK,IAA1B,EAAgC;MAC9B,OAAOD,IAAP;IACD;;IAED,MAAM,CAACE,YAAD,IAAiBD,iBAAvB;;IAEA,IAAIC,YAAY,CAACvD,MAAb,IAAuBmD,YAAY,CAACnD,MAAxC,EAAgD;MAC9C,OAAOqD,IAAI,CAAC3B,KAAL,CAAWyB,YAAY,CAACnD,MAAxB,CAAP;IACD;;IAED,OAAOqD,IAAP;EACD,CAfI,EAgBJG,IAhBI,CAgBC,IAhBD,CAAP;AAiBD;AAED;AACA;AACA;;;AACA,MAAMC,SAAN,CAAgB;EACdC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAO,IAAItH,QAA1B;EACD;;EAEDuH,KAAK,CAACC,GAAD,EAAM;IACT,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,CAAyBtE,IAAzB,CAA8BmE,GAA9B,CAAZ;;IACA,IAAIxB,GAAG,IAAIA,GAAG,CAAC,CAAD,CAAH,CAAOrC,MAAP,GAAgB,CAA3B,EAA8B;MAC5B,OAAO;QACL8C,IAAI,EAAE,OADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD;MAFH,CAAP;IAID;EACF;;EAED4B,IAAI,CAACJ,GAAD,EAAM;IACR,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBE,IAAjB,CAAsBvE,IAAtB,CAA2BmE,GAA3B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAMK,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,WAAf,EAA4B,EAA5B,CAAb;MACA,OAAO;QACLyF,IAAI,EAAE,MADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGL6B,cAAc,EAAE,UAHX;QAILxB,IAAI,EAAE,CAAC,KAAKiB,OAAL,CAAa/H,QAAd,GACF2D,KAAK,CAACmD,IAAD,EAAO,IAAP,CADH,GAEFA;MANC,CAAP;IAQD;EACF;;EAEDyB,MAAM,CAACN,GAAD,EAAM;IACV,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBI,MAAjB,CAAwBzE,IAAxB,CAA6BmE,GAA7B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAME,GAAG,GAAGF,GAAG,CAAC,CAAD,CAAf;MACA,MAAMK,IAAI,GAAGO,sBAAsB,CAACV,GAAD,EAAMF,GAAG,CAAC,CAAD,CAAH,IAAU,EAAhB,CAAnC;MAEA,OAAO;QACLS,IAAI,EAAE,MADD;QAELP,GAFK;QAGL6B,IAAI,EAAE/B,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOrB,IAAP,GAAc3D,OAAd,CAAsB,KAAKyG,KAAL,CAAWO,MAAX,CAAkBC,QAAxC,EAAkD,IAAlD,CAAT,GAAmEjC,GAAG,CAAC,CAAD,CAHvE;QAILK;MAJK,CAAP;IAMD;EACF;;EAED6B,OAAO,CAACV,GAAD,EAAM;IACX,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBQ,OAAjB,CAAyB7E,IAAzB,CAA8BmE,GAA9B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,IAAIK,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOrB,IAAP,EAAX,CADO,CAGP;;MACA,IAAI,KAAK5D,IAAL,CAAUsF,IAAV,CAAJ,EAAqB;QACnB,MAAM8B,OAAO,GAAGjF,KAAK,CAACmD,IAAD,EAAO,GAAP,CAArB;;QACA,IAAI,KAAKiB,OAAL,CAAa/H,QAAjB,EAA2B;UACzB8G,IAAI,GAAG8B,OAAO,CAACxD,IAAR,EAAP;QACD,CAFD,MAEO,IAAI,CAACwD,OAAD,IAAY,KAAKpH,IAAL,CAAUoH,OAAV,CAAhB,EAAoC;UACzC;UACA9B,IAAI,GAAG8B,OAAO,CAACxD,IAAR,EAAP;QACD;MACF;;MAED,OAAO;QACL8B,IAAI,EAAE,SADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLoC,KAAK,EAAEpC,GAAG,CAAC,CAAD,CAAH,CAAOrC,MAHT;QAIL0C,IAJK;QAKLK,MAAM,EAAE,KAAKP,KAAL,CAAW6B,MAAX,CAAkB3B,IAAlB;MALH,CAAP;IAOD;EACF;;EAEDgC,EAAE,CAACb,GAAD,EAAM;IACN,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBW,EAAjB,CAAoBhF,IAApB,CAAyBmE,GAAzB,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,OAAO;QACLS,IAAI,EAAE,IADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD;MAFH,CAAP;IAID;EACF;;EAEDsC,UAAU,CAACd,GAAD,EAAM;IACd,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBY,UAAjB,CAA4BjF,IAA5B,CAAiCmE,GAAjC,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAMK,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,cAAf,EAA+B,EAA/B,CAAb;MACA,MAAMuH,GAAG,GAAG,KAAKpC,KAAL,CAAWG,KAAX,CAAiBiC,GAA7B;MACA,KAAKpC,KAAL,CAAWG,KAAX,CAAiBiC,GAAjB,GAAuB,IAAvB;MACA,MAAM7B,MAAM,GAAG,KAAKP,KAAL,CAAWqC,WAAX,CAAuBnC,IAAvB,CAAf;MACA,KAAKF,KAAL,CAAWG,KAAX,CAAiBiC,GAAjB,GAAuBA,GAAvB;MACA,OAAO;QACL9B,IAAI,EAAE,YADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLU,MAHK;QAILL;MAJK,CAAP;IAMD;EACF;;EAEDoC,IAAI,CAACjB,GAAD,EAAM;IACR,IAAIxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBe,IAAjB,CAAsBpF,IAAtB,CAA2BmE,GAA3B,CAAV;;IACA,IAAIxB,GAAJ,EAAS;MACP,IAAIE,GAAJ,EAASwC,MAAT,EAAiBC,SAAjB,EAA4BC,MAA5B,EAAoCrF,CAApC,EAAuCsF,SAAvC,EAAkDC,iBAAlD,EACEC,IADF,EACQC,QADR,EACkBC,OADlB,EAC2BC,YAD3B,EACyCC,QADzC;MAGA,IAAIC,IAAI,GAAGpD,GAAG,CAAC,CAAD,CAAH,CAAOrB,IAAP,EAAX;MACA,MAAM0E,SAAS,GAAGD,IAAI,CAACzF,MAAL,GAAc,CAAhC;MAEA,MAAM8E,IAAI,GAAG;QACXhC,IAAI,EAAE,MADK;QAEXP,GAAG,EAAE,EAFM;QAGXoD,OAAO,EAAED,SAHE;QAIXE,KAAK,EAAEF,SAAS,GAAG,CAACD,IAAI,CAAC/D,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAJ,GAAwB,EAJ7B;QAKXmE,KAAK,EAAE,KALI;QAMXC,KAAK,EAAE;MANI,CAAb;MASAL,IAAI,GAAGC,SAAS,GAAI,aAAYD,IAAI,CAAC/D,KAAL,CAAW,CAAC,CAAZ,CAAe,EAA/B,GAAoC,KAAI+D,IAAK,EAA7D;;MAEA,IAAI,KAAK9B,OAAL,CAAa/H,QAAjB,EAA2B;QACzB6J,IAAI,GAAGC,SAAS,GAAGD,IAAH,GAAU,OAA1B;MACD,CApBM,CAsBP;;;MACA,MAAMM,SAAS,GAAG,IAAIrJ,MAAJ,CAAY,WAAU+I,IAAK,+BAA3B,CAAlB,CAvBO,CAyBP;;MACA,OAAO5B,GAAP,EAAY;QACV2B,QAAQ,GAAG,KAAX;;QACA,IAAI,EAAEnD,GAAG,GAAG0D,SAAS,CAACrG,IAAV,CAAemE,GAAf,CAAR,CAAJ,EAAkC;UAChC;QACD;;QAED,IAAI,KAAKC,KAAL,CAAWC,KAAX,CAAiBW,EAAjB,CAAoBtH,IAApB,CAAyByG,GAAzB,CAAJ,EAAmC;UAAE;UACnC;QACD;;QAEDtB,GAAG,GAAGF,GAAG,CAAC,CAAD,CAAT;QACAwB,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAcwE,GAAG,CAACvC,MAAlB,CAAN;QAEAoF,IAAI,GAAG/C,GAAG,CAAC,CAAD,CAAH,CAAOtB,KAAP,CAAa,IAAb,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB1D,OAAzB,CAAiC,MAAjC,EAA0C2I,CAAD,IAAO,IAAIC,MAAJ,CAAW,IAAID,CAAC,CAAChG,MAAjB,CAAhD,CAAP;QACAqF,QAAQ,GAAGxB,GAAG,CAAC9C,KAAJ,CAAU,IAAV,EAAgB,CAAhB,EAAmB,CAAnB,CAAX;;QAEA,IAAI,KAAK4C,OAAL,CAAa/H,QAAjB,EAA2B;UACzBqJ,MAAM,GAAG,CAAT;UACAM,YAAY,GAAGH,IAAI,CAACc,QAAL,EAAf;QACD,CAHD,MAGO;UACLjB,MAAM,GAAG5C,GAAG,CAAC,CAAD,CAAH,CAAO8D,MAAP,CAAc,MAAd,CAAT,CADK,CAC2B;;UAChClB,MAAM,GAAGA,MAAM,GAAG,CAAT,GAAa,CAAb,GAAiBA,MAA1B,CAFK,CAE6B;;UAClCM,YAAY,GAAGH,IAAI,CAAC1D,KAAL,CAAWuD,MAAX,CAAf;UACAA,MAAM,IAAI5C,GAAG,CAAC,CAAD,CAAH,CAAOrC,MAAjB;QACD;;QAEDkF,SAAS,GAAG,KAAZ;;QAEA,IAAI,CAACE,IAAD,IAAS,OAAOhI,IAAP,CAAYiI,QAAZ,CAAb,EAAoC;UAAE;UACpC9C,GAAG,IAAI8C,QAAQ,GAAG,IAAlB;UACAxB,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAcsH,QAAQ,CAACrF,MAAT,GAAkB,CAAhC,CAAN;UACAwF,QAAQ,GAAG,IAAX;QACD;;QAED,IAAI,CAACA,QAAL,EAAe;UACb,MAAMY,eAAe,GAAG,IAAI1J,MAAJ,CAAY,QAAO2J,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrB,MAAM,GAAG,CAArB,CAAwB,qDAA3C,CAAxB;UACA,MAAMsB,OAAO,GAAG,IAAI7J,MAAJ,CAAY,QAAO2J,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrB,MAAM,GAAG,CAArB,CAAwB,oDAA3C,CAAhB;UACA,MAAMuB,gBAAgB,GAAG,IAAI9J,MAAJ,CAAY,QAAO2J,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrB,MAAM,GAAG,CAArB,CAAwB,iBAA3C,CAAzB;UACA,MAAMwB,iBAAiB,GAAG,IAAI/J,MAAJ,CAAY,QAAO2J,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYrB,MAAM,GAAG,CAArB,CAAwB,IAA3C,CAA1B,CAJa,CAMb;;UACA,OAAOpB,GAAP,EAAY;YACVyB,OAAO,GAAGzB,GAAG,CAAC9C,KAAJ,CAAU,IAAV,EAAgB,CAAhB,EAAmB,CAAnB,CAAV;YACAsE,QAAQ,GAAGC,OAAX,CAFU,CAIV;;YACA,IAAI,KAAK3B,OAAL,CAAa/H,QAAjB,EAA2B;cACzByJ,QAAQ,GAAGA,QAAQ,CAAChI,OAAT,CAAiB,yBAAjB,EAA4C,IAA5C,CAAX;YACD,CAPS,CASV;;;YACA,IAAImJ,gBAAgB,CAACpJ,IAAjB,CAAsBiI,QAAtB,CAAJ,EAAqC;cACnC;YACD,CAZS,CAcV;;;YACA,IAAIoB,iBAAiB,CAACrJ,IAAlB,CAAuBiI,QAAvB,CAAJ,EAAsC;cACpC;YACD,CAjBS,CAmBV;;;YACA,IAAIe,eAAe,CAAChJ,IAAhB,CAAqBiI,QAArB,CAAJ,EAAoC;cAClC;YACD,CAtBS,CAwBV;;;YACA,IAAIkB,OAAO,CAACnJ,IAAR,CAAayG,GAAb,CAAJ,EAAuB;cACrB;YACD;;YAED,IAAIwB,QAAQ,CAACc,MAAT,CAAgB,MAAhB,KAA2BlB,MAA3B,IAAqC,CAACI,QAAQ,CAACrE,IAAT,EAA1C,EAA2D;cAAE;cAC3DuE,YAAY,IAAI,OAAOF,QAAQ,CAAC3D,KAAT,CAAeuD,MAAf,CAAvB;YACD,CAFD,MAEO;cACL;cACA,IAAIC,SAAJ,EAAe;gBACb;cACD,CAJI,CAML;;;cACA,IAAIE,IAAI,CAACe,MAAL,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;gBAAE;gBAC9B;cACD;;cACD,IAAIK,gBAAgB,CAACpJ,IAAjB,CAAsBgI,IAAtB,CAAJ,EAAiC;gBAC/B;cACD;;cACD,IAAIqB,iBAAiB,CAACrJ,IAAlB,CAAuBgI,IAAvB,CAAJ,EAAkC;gBAChC;cACD;;cACD,IAAImB,OAAO,CAACnJ,IAAR,CAAagI,IAAb,CAAJ,EAAwB;gBACtB;cACD;;cAEDG,YAAY,IAAI,OAAOF,QAAvB;YACD;;YAED,IAAI,CAACH,SAAD,IAAc,CAACG,QAAQ,CAACrE,IAAT,EAAnB,EAAoC;cAAE;cACpCkE,SAAS,GAAG,IAAZ;YACD;;YAED3C,GAAG,IAAI+C,OAAO,GAAG,IAAjB;YACAzB,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAcuH,OAAO,CAACtF,MAAR,GAAiB,CAA/B,CAAN;YACAoF,IAAI,GAAGC,QAAQ,CAAC3D,KAAT,CAAeuD,MAAf,CAAP;UACD;QACF;;QAED,IAAI,CAACH,IAAI,CAACe,KAAV,EAAiB;UACf;UACA,IAAIV,iBAAJ,EAAuB;YACrBL,IAAI,CAACe,KAAL,GAAa,IAAb;UACD,CAFD,MAEO,IAAI,YAAYzI,IAAZ,CAAiBmF,GAAjB,CAAJ,EAA2B;YAChC4C,iBAAiB,GAAG,IAApB;UACD;QACF,CAhHS,CAkHV;;;QACA,IAAI,KAAKxB,OAAL,CAAarI,GAAjB,EAAsB;UACpByJ,MAAM,GAAG,cAAcrF,IAAd,CAAmB6F,YAAnB,CAAT;;UACA,IAAIR,MAAJ,EAAY;YACVC,SAAS,GAAGD,MAAM,CAAC,CAAD,CAAN,KAAc,MAA1B;YACAQ,YAAY,GAAGA,YAAY,CAAClI,OAAb,CAAqB,cAArB,EAAqC,EAArC,CAAf;UACD;QACF;;QAEDyH,IAAI,CAACgB,KAAL,CAAW1E,IAAX,CAAgB;UACd0B,IAAI,EAAE,WADQ;UAEdP,GAFc;UAGdmE,IAAI,EAAE,CAAC,CAAC3B,MAHM;UAId4B,OAAO,EAAE3B,SAJK;UAKda,KAAK,EAAE,KALO;UAMdnD,IAAI,EAAE6C;QANQ,CAAhB;QASAT,IAAI,CAACvC,GAAL,IAAYA,GAAZ;MACD,CA/JM,CAiKP;;;MACAuC,IAAI,CAACgB,KAAL,CAAWhB,IAAI,CAACgB,KAAL,CAAW9F,MAAX,GAAoB,CAA/B,EAAkCuC,GAAlC,GAAwCA,GAAG,CAACqE,SAAJ,EAAxC;MACA9B,IAAI,CAACgB,KAAL,CAAWhB,IAAI,CAACgB,KAAL,CAAW9F,MAAX,GAAoB,CAA/B,EAAkC0C,IAAlC,GAAyC6C,YAAY,CAACqB,SAAb,EAAzC;MACA9B,IAAI,CAACvC,GAAL,GAAWuC,IAAI,CAACvC,GAAL,CAASqE,SAAT,EAAX;MAEA,MAAMrF,CAAC,GAAGuD,IAAI,CAACgB,KAAL,CAAW9F,MAArB,CAtKO,CAwKP;;MACA,KAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;QACtB,KAAK4C,KAAL,CAAWG,KAAX,CAAiBiC,GAAjB,GAAuB,KAAvB;QACAE,IAAI,CAACgB,KAAL,CAAWlG,CAAX,EAAcmD,MAAd,GAAuB,KAAKP,KAAL,CAAWqC,WAAX,CAAuBC,IAAI,CAACgB,KAAL,CAAWlG,CAAX,EAAc8C,IAArC,EAA2C,EAA3C,CAAvB;;QAEA,IAAI,CAACoC,IAAI,CAACe,KAAV,EAAiB;UACf;UACA,MAAMgB,OAAO,GAAG/B,IAAI,CAACgB,KAAL,CAAWlG,CAAX,EAAcmD,MAAd,CAAqB+D,MAArB,CAA4Bd,CAAC,IAAIA,CAAC,CAAClD,IAAF,KAAW,OAA5C,CAAhB;UACA,MAAMiE,qBAAqB,GAAGF,OAAO,CAAC7G,MAAR,GAAiB,CAAjB,IAAsB6G,OAAO,CAACG,IAAR,CAAahB,CAAC,IAAI,SAAS5I,IAAT,CAAc4I,CAAC,CAACzD,GAAhB,CAAlB,CAApD;UAEAuC,IAAI,CAACe,KAAL,GAAakB,qBAAb;QACD;MACF,CApLM,CAsLP;;;MACA,IAAIjC,IAAI,CAACe,KAAT,EAAgB;QACd,KAAKjG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;UACtBkF,IAAI,CAACgB,KAAL,CAAWlG,CAAX,EAAciG,KAAd,GAAsB,IAAtB;QACD;MACF;;MAED,OAAOf,IAAP;IACD;EACF;;EAED5H,IAAI,CAAC2G,GAAD,EAAM;IACR,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiB7G,IAAjB,CAAsBwC,IAAtB,CAA2BmE,GAA3B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAMQ,KAAK,GAAG;QACZC,IAAI,EAAE,MADM;QAEZP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFI;QAGZ4E,GAAG,EAAE,CAAC,KAAKtD,OAAL,CAAa5H,SAAd,KACCsG,GAAG,CAAC,CAAD,CAAH,KAAW,KAAX,IAAoBA,GAAG,CAAC,CAAD,CAAH,KAAW,QAA/B,IAA2CA,GAAG,CAAC,CAAD,CAAH,KAAW,OADvD,CAHO;QAKZK,IAAI,EAAEL,GAAG,CAAC,CAAD;MALG,CAAd;;MAOA,IAAI,KAAKsB,OAAL,CAAa7H,QAAjB,EAA2B;QACzB,MAAM4G,IAAI,GAAG,KAAKiB,OAAL,CAAa5H,SAAb,GAAyB,KAAK4H,OAAL,CAAa5H,SAAb,CAAuBsG,GAAG,CAAC,CAAD,CAA1B,CAAzB,GAA0DpF,MAAM,CAACoF,GAAG,CAAC,CAAD,CAAJ,CAA7E;QACAQ,KAAK,CAACC,IAAN,GAAa,WAAb;QACAD,KAAK,CAACH,IAAN,GAAaA,IAAb;QACAG,KAAK,CAACE,MAAN,GAAe,KAAKP,KAAL,CAAW6B,MAAX,CAAkB3B,IAAlB,CAAf;MACD;;MACD,OAAOG,KAAP;IACD;EACF;;EAEDqE,GAAG,CAACrD,GAAD,EAAM;IACP,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBmD,GAAjB,CAAqBxH,IAArB,CAA0BmE,GAA1B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAM8E,GAAG,GAAG9E,GAAG,CAAC,CAAD,CAAH,CAAO3E,WAAP,GAAqBL,OAArB,CAA6B,MAA7B,EAAqC,GAArC,CAAZ;MACA,MAAMuB,IAAI,GAAGyD,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,UAAf,EAA2B,IAA3B,EAAiCA,OAAjC,CAAyC,KAAKyG,KAAL,CAAWO,MAAX,CAAkBC,QAA3D,EAAqE,IAArE,CAAT,GAAsF,EAAnG;MACA,MAAM7B,KAAK,GAAGJ,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOtE,SAAP,CAAiB,CAAjB,EAAoBsE,GAAG,CAAC,CAAD,CAAH,CAAOrC,MAAP,GAAgB,CAApC,EAAuC3C,OAAvC,CAA+C,KAAKyG,KAAL,CAAWO,MAAX,CAAkBC,QAAjE,EAA2E,IAA3E,CAAT,GAA4FjC,GAAG,CAAC,CAAD,CAA7G;MACA,OAAO;QACLS,IAAI,EAAE,KADD;QAELqE,GAFK;QAGL5E,GAAG,EAAEF,GAAG,CAAC,CAAD,CAHH;QAILzD,IAJK;QAKL6D;MALK,CAAP;IAOD;EACF;;EAED2E,KAAK,CAACvD,GAAD,EAAM;IACT,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBqD,KAAjB,CAAuB1H,IAAvB,CAA4BmE,GAA5B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAMgF,IAAI,GAAG;QACXvE,IAAI,EAAE,OADK;QAEXwE,MAAM,EAAEjH,UAAU,CAACgC,GAAG,CAAC,CAAD,CAAJ,CAAV,CAAmBe,GAAnB,CAAuB/B,CAAC,IAAI;UAAE,OAAO;YAAEqB,IAAI,EAAErB;UAAR,CAAP;QAAqB,CAAnD,CAFG;QAGXkG,KAAK,EAAElF,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,YAAf,EAA6B,EAA7B,EAAiC0D,KAAjC,CAAuC,QAAvC,CAHI;QAIXyG,IAAI,EAAEnF,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAH,CAAOrB,IAAP,EAAV,GAA0BqB,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,WAAf,EAA4B,EAA5B,EAAgC0D,KAAhC,CAAsC,IAAtC,CAA1B,GAAwE;MAJnE,CAAb;;MAOA,IAAIsG,IAAI,CAACC,MAAL,CAAYtH,MAAZ,KAAuBqH,IAAI,CAACE,KAAL,CAAWvH,MAAtC,EAA8C;QAC5CqH,IAAI,CAAC9E,GAAL,GAAWF,GAAG,CAAC,CAAD,CAAd;QAEA,IAAId,CAAC,GAAG8F,IAAI,CAACE,KAAL,CAAWvH,MAAnB;QACA,IAAIJ,CAAJ,EAAO6H,CAAP,EAAUC,CAAV,EAAalH,GAAb;;QACA,KAAKZ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;UACtB,IAAI,YAAYxC,IAAZ,CAAiBiK,IAAI,CAACE,KAAL,CAAW3H,CAAX,CAAjB,CAAJ,EAAqC;YACnCyH,IAAI,CAACE,KAAL,CAAW3H,CAAX,IAAgB,OAAhB;UACD,CAFD,MAEO,IAAI,aAAaxC,IAAb,CAAkBiK,IAAI,CAACE,KAAL,CAAW3H,CAAX,CAAlB,CAAJ,EAAsC;YAC3CyH,IAAI,CAACE,KAAL,CAAW3H,CAAX,IAAgB,QAAhB;UACD,CAFM,MAEA,IAAI,YAAYxC,IAAZ,CAAiBiK,IAAI,CAACE,KAAL,CAAW3H,CAAX,CAAjB,CAAJ,EAAqC;YAC1CyH,IAAI,CAACE,KAAL,CAAW3H,CAAX,IAAgB,MAAhB;UACD,CAFM,MAEA;YACLyH,IAAI,CAACE,KAAL,CAAW3H,CAAX,IAAgB,IAAhB;UACD;QACF;;QAED2B,CAAC,GAAG8F,IAAI,CAACG,IAAL,CAAUxH,MAAd;;QACA,KAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;UACtByH,IAAI,CAACG,IAAL,CAAU5H,CAAV,IAAeS,UAAU,CAACgH,IAAI,CAACG,IAAL,CAAU5H,CAAV,CAAD,EAAeyH,IAAI,CAACC,MAAL,CAAYtH,MAA3B,CAAV,CAA6CoD,GAA7C,CAAiD/B,CAAC,IAAI;YAAE,OAAO;cAAEqB,IAAI,EAAErB;YAAR,CAAP;UAAqB,CAA7E,CAAf;QACD,CApB2C,CAsB5C;QAEA;;;QACAE,CAAC,GAAG8F,IAAI,CAACC,MAAL,CAAYtH,MAAhB;;QACA,KAAKyH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlG,CAAhB,EAAmBkG,CAAC,EAApB,EAAwB;UACtBJ,IAAI,CAACC,MAAL,CAAYG,CAAZ,EAAe1E,MAAf,GAAwB,KAAKP,KAAL,CAAW6B,MAAX,CAAkBgD,IAAI,CAACC,MAAL,CAAYG,CAAZ,EAAe/E,IAAjC,CAAxB;QACD,CA5B2C,CA8B5C;;;QACAnB,CAAC,GAAG8F,IAAI,CAACG,IAAL,CAAUxH,MAAd;;QACA,KAAKyH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlG,CAAhB,EAAmBkG,CAAC,EAApB,EAAwB;UACtBjH,GAAG,GAAG6G,IAAI,CAACG,IAAL,CAAUC,CAAV,CAAN;;UACA,KAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlH,GAAG,CAACR,MAApB,EAA4B0H,CAAC,EAA7B,EAAiC;YAC/BlH,GAAG,CAACkH,CAAD,CAAH,CAAO3E,MAAP,GAAgB,KAAKP,KAAL,CAAW6B,MAAX,CAAkB7D,GAAG,CAACkH,CAAD,CAAH,CAAOhF,IAAzB,CAAhB;UACD;QACF;;QAED,OAAO2E,IAAP;MACD;IACF;EACF;;EAEDM,QAAQ,CAAC9D,GAAD,EAAM;IACZ,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiB4D,QAAjB,CAA0BjI,IAA1B,CAA+BmE,GAA/B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,OAAO;QACLS,IAAI,EAAE,SADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLoC,KAAK,EAAEpC,GAAG,CAAC,CAAD,CAAH,CAAO1E,MAAP,CAAc,CAAd,MAAqB,GAArB,GAA2B,CAA3B,GAA+B,CAHjC;QAIL+E,IAAI,EAAEL,GAAG,CAAC,CAAD,CAJJ;QAKLU,MAAM,EAAE,KAAKP,KAAL,CAAW6B,MAAX,CAAkBhC,GAAG,CAAC,CAAD,CAArB;MALH,CAAP;IAOD;EACF;;EAEDuF,SAAS,CAAC/D,GAAD,EAAM;IACb,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiB6D,SAAjB,CAA2BlI,IAA3B,CAAgCmE,GAAhC,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAMK,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAO1E,MAAP,CAAc0E,GAAG,CAAC,CAAD,CAAH,CAAOrC,MAAP,GAAgB,CAA9B,MAAqC,IAArC,GACTqC,GAAG,CAAC,CAAD,CAAH,CAAOX,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CADS,GAETW,GAAG,CAAC,CAAD,CAFP;MAGA,OAAO;QACLS,IAAI,EAAE,WADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK,IAHK;QAILK,MAAM,EAAE,KAAKP,KAAL,CAAW6B,MAAX,CAAkB3B,IAAlB;MAJH,CAAP;IAMD;EACF;;EAEDA,IAAI,CAACmB,GAAD,EAAM;IACR,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWC,KAAX,CAAiBrB,IAAjB,CAAsBhD,IAAtB,CAA2BmE,GAA3B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,OAAO;QACLS,IAAI,EAAE,MADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK,IAAI,EAAEL,GAAG,CAAC,CAAD,CAHJ;QAILU,MAAM,EAAE,KAAKP,KAAL,CAAW6B,MAAX,CAAkBhC,GAAG,CAAC,CAAD,CAArB;MAJH,CAAP;IAMD;EACF;;EAEDpF,MAAM,CAAC4G,GAAD,EAAM;IACV,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkBpH,MAAlB,CAAyByC,IAAzB,CAA8BmE,GAA9B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,OAAO;QACLS,IAAI,EAAE,QADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK,IAAI,EAAEzF,MAAM,CAACoF,GAAG,CAAC,CAAD,CAAJ;MAHP,CAAP;IAKD;EACF;;EAED8E,GAAG,CAACtD,GAAD,EAAM;IACP,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkB8C,GAAlB,CAAsBzH,IAAtB,CAA2BmE,GAA3B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,IAAI,CAAC,KAAKG,KAAL,CAAWG,KAAX,CAAiBC,MAAlB,IAA4B,QAAQxF,IAAR,CAAaiF,GAAG,CAAC,CAAD,CAAhB,CAAhC,EAAsD;QACpD,KAAKG,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,GAA0B,IAA1B;MACD,CAFD,MAEO,IAAI,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,IAA2B,UAAUxF,IAAV,CAAeiF,GAAG,CAAC,CAAD,CAAlB,CAA/B,EAAuD;QAC5D,KAAKG,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,GAA0B,KAA1B;MACD;;MACD,IAAI,CAAC,KAAKJ,KAAL,CAAWG,KAAX,CAAiBkF,UAAlB,IAAgC,iCAAiCzK,IAAjC,CAAsCiF,GAAG,CAAC,CAAD,CAAzC,CAApC,EAAmF;QACjF,KAAKG,KAAL,CAAWG,KAAX,CAAiBkF,UAAjB,GAA8B,IAA9B;MACD,CAFD,MAEO,IAAI,KAAKrF,KAAL,CAAWG,KAAX,CAAiBkF,UAAjB,IAA+B,mCAAmCzK,IAAnC,CAAwCiF,GAAG,CAAC,CAAD,CAA3C,CAAnC,EAAoF;QACzF,KAAKG,KAAL,CAAWG,KAAX,CAAiBkF,UAAjB,GAA8B,KAA9B;MACD;;MAED,OAAO;QACL/E,IAAI,EAAE,KAAKa,OAAL,CAAa7H,QAAb,GACF,MADE,GAEF,MAHC;QAILyG,GAAG,EAAEF,GAAG,CAAC,CAAD,CAJH;QAKLO,MAAM,EAAE,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC,MALpB;QAMLiF,UAAU,EAAE,KAAKrF,KAAL,CAAWG,KAAX,CAAiBkF,UANxB;QAOLnF,IAAI,EAAE,KAAKiB,OAAL,CAAa7H,QAAb,GACD,KAAK6H,OAAL,CAAa5H,SAAb,GACC,KAAK4H,OAAL,CAAa5H,SAAb,CAAuBsG,GAAG,CAAC,CAAD,CAA1B,CADD,GAECpF,MAAM,CAACoF,GAAG,CAAC,CAAD,CAAJ,CAHN,GAIFA,GAAG,CAAC,CAAD;MAXF,CAAP;IAaD;EACF;;EAEDC,IAAI,CAACuB,GAAD,EAAM;IACR,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkB/B,IAAlB,CAAuB5C,IAAvB,CAA4BmE,GAA5B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,MAAMyF,UAAU,GAAGzF,GAAG,CAAC,CAAD,CAAH,CAAOrB,IAAP,EAAnB;;MACA,IAAI,CAAC,KAAK2C,OAAL,CAAa/H,QAAd,IAA0B,KAAKwB,IAAL,CAAU0K,UAAV,CAA9B,EAAqD;QACnD;QACA,IAAI,CAAE,KAAK1K,IAAL,CAAU0K,UAAV,CAAN,EAA8B;UAC5B;QACD,CAJkD,CAMnD;;;QACA,MAAMC,UAAU,GAAGxI,KAAK,CAACuI,UAAU,CAACpG,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAD,EAA0B,IAA1B,CAAxB;;QACA,IAAI,CAACoG,UAAU,CAAC9H,MAAX,GAAoB+H,UAAU,CAAC/H,MAAhC,IAA0C,CAA1C,KAAgD,CAApD,EAAuD;UACrD;QACD;MACF,CAXD,MAWO;QACL;QACA,MAAMgI,cAAc,GAAGrG,kBAAkB,CAACU,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAT,CAAzC;;QACA,IAAI2F,cAAc,GAAG,CAAC,CAAtB,EAAyB;UACvB,MAAMpC,KAAK,GAAGvD,GAAG,CAAC,CAAD,CAAH,CAAOrD,OAAP,CAAe,GAAf,MAAwB,CAAxB,GAA4B,CAA5B,GAAgC,CAA9C;UACA,MAAMiJ,OAAO,GAAGrC,KAAK,GAAGvD,GAAG,CAAC,CAAD,CAAH,CAAOrC,MAAf,GAAwBgI,cAAxC;UACA3F,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOtE,SAAP,CAAiB,CAAjB,EAAoBiK,cAApB,CAAT;UACA3F,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOtE,SAAP,CAAiB,CAAjB,EAAoBkK,OAApB,EAA6BjH,IAA7B,EAAT;UACAqB,GAAG,CAAC,CAAD,CAAH,GAAS,EAAT;QACD;MACF;;MACD,IAAIzD,IAAI,GAAGyD,GAAG,CAAC,CAAD,CAAd;MACA,IAAII,KAAK,GAAG,EAAZ;;MACA,IAAI,KAAKkB,OAAL,CAAa/H,QAAjB,EAA2B;QACzB;QACA,MAAM0G,IAAI,GAAG,gCAAgC5C,IAAhC,CAAqCd,IAArC,CAAb;;QAEA,IAAI0D,IAAJ,EAAU;UACR1D,IAAI,GAAG0D,IAAI,CAAC,CAAD,CAAX;UACAG,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAZ;QACD;MACF,CARD,MAQO;QACLG,KAAK,GAAGJ,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,CAAOX,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAT,GAA+B,EAAvC;MACD;;MAED9C,IAAI,GAAGA,IAAI,CAACoC,IAAL,EAAP;;MACA,IAAI,KAAK5D,IAAL,CAAUwB,IAAV,CAAJ,EAAqB;QACnB,IAAI,KAAK+E,OAAL,CAAa/H,QAAb,IAAyB,CAAE,KAAKwB,IAAL,CAAU0K,UAAV,CAA/B,EAAuD;UACrD;UACAlJ,IAAI,GAAGA,IAAI,CAAC8C,KAAL,CAAW,CAAX,CAAP;QACD,CAHD,MAGO;UACL9C,IAAI,GAAGA,IAAI,CAAC8C,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;QACD;MACF;;MACD,OAAOU,UAAU,CAACC,GAAD,EAAM;QACrBzD,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACvB,OAAL,CAAa,KAAKyG,KAAL,CAAWO,MAAX,CAAkBC,QAA/B,EAAyC,IAAzC,CAAH,GAAoD1F,IADzC;QAErB6D,KAAK,EAAEA,KAAK,GAAGA,KAAK,CAACpF,OAAN,CAAc,KAAKyG,KAAL,CAAWO,MAAX,CAAkBC,QAAhC,EAA0C,IAA1C,CAAH,GAAqD7B;MAF5C,CAAN,EAGdJ,GAAG,CAAC,CAAD,CAHW,EAGN,KAAKG,KAHC,CAAjB;IAID;EACF;;EAED0F,OAAO,CAACrE,GAAD,EAAMsE,KAAN,EAAa;IAClB,IAAI9F,GAAJ;;IACA,IAAI,CAACA,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkB6D,OAAlB,CAA0BxI,IAA1B,CAA+BmE,GAA/B,CAAP,MACIxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkB+D,MAAlB,CAAyB1I,IAAzB,CAA8BmE,GAA9B,CADV,CAAJ,EACmD;MACjD,IAAIvB,IAAI,GAAG,CAACD,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAd,EAAmBhF,OAAnB,CAA2B,MAA3B,EAAmC,GAAnC,CAAX;MACAiF,IAAI,GAAG6F,KAAK,CAAC7F,IAAI,CAAC5E,WAAL,EAAD,CAAZ;;MACA,IAAI,CAAC4E,IAAL,EAAW;QACT,MAAMI,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAO1E,MAAP,CAAc,CAAd,CAAb;QACA,OAAO;UACLmF,IAAI,EAAE,MADD;UAELP,GAAG,EAAEG,IAFA;UAGLA;QAHK,CAAP;MAKD;;MACD,OAAON,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAYD,GAAG,CAAC,CAAD,CAAf,EAAoB,KAAKG,KAAzB,CAAjB;IACD;EACF;;EAED6F,QAAQ,CAACxE,GAAD,EAAMyE,SAAN,EAAiBC,QAAQ,GAAG,EAA5B,EAAgC;IACtC,IAAI9H,KAAK,GAAG,KAAKqD,KAAL,CAAWO,MAAX,CAAkBgE,QAAlB,CAA2BG,MAA3B,CAAkC9I,IAAlC,CAAuCmE,GAAvC,CAAZ;IACA,IAAI,CAACpD,KAAL,EAAY,OAF0B,CAItC;;IACA,IAAIA,KAAK,CAAC,CAAD,CAAL,IAAY8H,QAAQ,CAAC9H,KAAT,CAAe,eAAf,CAAhB,EAAiD;IAEjD,MAAMgI,QAAQ,GAAGhI,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwB,EAAzC;;IAEA,IAAI,CAACgI,QAAD,IAAcA,QAAQ,KAAKF,QAAQ,KAAK,EAAb,IAAmB,KAAKzE,KAAL,CAAWO,MAAX,CAAkBqE,WAAlB,CAA8BhJ,IAA9B,CAAmC6I,QAAnC,CAAxB,CAA1B,EAAkG;MAChG,MAAMI,OAAO,GAAGlI,KAAK,CAAC,CAAD,CAAL,CAAST,MAAT,GAAkB,CAAlC;MACA,IAAI4I,MAAJ;MAAA,IAAYC,OAAZ;MAAA,IAAqBC,UAAU,GAAGH,OAAlC;MAAA,IAA2CI,aAAa,GAAG,CAA3D;MAEA,MAAMC,MAAM,GAAGvI,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,MAAgB,GAAhB,GAAsB,KAAKqD,KAAL,CAAWO,MAAX,CAAkBgE,QAAlB,CAA2BY,SAAjD,GAA6D,KAAKnF,KAAL,CAAWO,MAAX,CAAkBgE,QAAlB,CAA2Ba,SAAvG;MACAF,MAAM,CAACG,SAAP,GAAmB,CAAnB,CALgG,CAOhG;;MACAb,SAAS,GAAGA,SAAS,CAAC5G,KAAV,CAAgB,CAAC,CAAD,GAAKmC,GAAG,CAAC7D,MAAT,GAAkB2I,OAAlC,CAAZ;;MAEA,OAAO,CAAClI,KAAK,GAAGuI,MAAM,CAACtJ,IAAP,CAAY4I,SAAZ,CAAT,KAAoC,IAA3C,EAAiD;QAC/CM,MAAM,GAAGnI,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwBA,KAAK,CAAC,CAAD,CAA7B,IAAoCA,KAAK,CAAC,CAAD,CAAzC,IAAgDA,KAAK,CAAC,CAAD,CAArD,IAA4DA,KAAK,CAAC,CAAD,CAA1E;QAEA,IAAI,CAACmI,MAAL,EAAa,SAHkC,CAGxB;;QAEvBC,OAAO,GAAGD,MAAM,CAAC5I,MAAjB;;QAEA,IAAIS,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAArB,EAA0B;UAAE;UAC1BqI,UAAU,IAAID,OAAd;UACA;QACD,CAHD,MAGO,IAAIpI,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAArB,EAA0B;UAAE;UACjC,IAAIkI,OAAO,GAAG,CAAV,IAAe,EAAE,CAACA,OAAO,GAAGE,OAAX,IAAsB,CAAxB,CAAnB,EAA+C;YAC7CE,aAAa,IAAIF,OAAjB;YACA,SAF6C,CAEnC;UACX;QACF;;QAEDC,UAAU,IAAID,OAAd;QAEA,IAAIC,UAAU,GAAG,CAAjB,EAAoB,SAnB2B,CAmBjB;QAE9B;;QACAD,OAAO,GAAGxC,IAAI,CAACC,GAAL,CAASuC,OAAT,EAAkBA,OAAO,GAAGC,UAAV,GAAuBC,aAAzC,CAAV;QAEA,MAAMxG,GAAG,GAAGsB,GAAG,CAACnC,KAAJ,CAAU,CAAV,EAAaiH,OAAO,GAAGlI,KAAK,CAAC2I,KAAhB,IAAyB3I,KAAK,CAAC,CAAD,CAAL,CAAST,MAAT,GAAkB4I,MAAM,CAAC5I,MAAlD,IAA4D6I,OAAzE,CAAZ,CAxB+C,CA0B/C;;QACA,IAAIxC,IAAI,CAACC,GAAL,CAASqC,OAAT,EAAkBE,OAAlB,IAA6B,CAAjC,EAAoC;UAClC,MAAMnG,IAAI,GAAGH,GAAG,CAACb,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAb;UACA,OAAO;YACLoB,IAAI,EAAE,IADD;YAELP,GAFK;YAGLG,IAHK;YAILK,MAAM,EAAE,KAAKP,KAAL,CAAWQ,YAAX,CAAwBN,IAAxB;UAJH,CAAP;QAMD,CAnC8C,CAqC/C;;;QACA,MAAMA,IAAI,GAAGH,GAAG,CAACb,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAb;QACA,OAAO;UACLoB,IAAI,EAAE,QADD;UAELP,GAFK;UAGLG,IAHK;UAILK,MAAM,EAAE,KAAKP,KAAL,CAAWQ,YAAX,CAAwBN,IAAxB;QAJH,CAAP;MAMD;IACF;EACF;;EAED2G,QAAQ,CAACxF,GAAD,EAAM;IACZ,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkBJ,IAAlB,CAAuBvE,IAAvB,CAA4BmE,GAA5B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,IAAIK,IAAI,GAAGL,GAAG,CAAC,CAAD,CAAH,CAAOhF,OAAP,CAAe,KAAf,EAAsB,GAAtB,CAAX;MACA,MAAMiM,gBAAgB,GAAG,OAAOlM,IAAP,CAAYsF,IAAZ,CAAzB;MACA,MAAM6G,uBAAuB,GAAG,KAAKnM,IAAL,CAAUsF,IAAV,KAAmB,KAAKtF,IAAL,CAAUsF,IAAV,CAAnD;;MACA,IAAI4G,gBAAgB,IAAIC,uBAAxB,EAAiD;QAC/C7G,IAAI,GAAGA,IAAI,CAAC3E,SAAL,CAAe,CAAf,EAAkB2E,IAAI,CAAC1C,MAAL,GAAc,CAAhC,CAAP;MACD;;MACD0C,IAAI,GAAGzF,MAAM,CAACyF,IAAD,EAAO,IAAP,CAAb;MACA,OAAO;QACLI,IAAI,EAAE,UADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK;MAHK,CAAP;IAKD;EACF;;EAED8G,EAAE,CAAC3F,GAAD,EAAM;IACN,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkBmF,EAAlB,CAAqB9J,IAArB,CAA0BmE,GAA1B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,OAAO;QACLS,IAAI,EAAE,IADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD;MAFH,CAAP;IAID;EACF;;EAEDoH,GAAG,CAAC5F,GAAD,EAAM;IACP,MAAMxB,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkBoF,GAAlB,CAAsB/J,IAAtB,CAA2BmE,GAA3B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,OAAO;QACLS,IAAI,EAAE,KADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK,IAAI,EAAEL,GAAG,CAAC,CAAD,CAHJ;QAILU,MAAM,EAAE,KAAKP,KAAL,CAAWQ,YAAX,CAAwBX,GAAG,CAAC,CAAD,CAA3B;MAJH,CAAP;IAMD;EACF;;EAEDqH,QAAQ,CAAC7F,GAAD,EAAMlI,MAAN,EAAc;IACpB,MAAM0G,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkBqF,QAAlB,CAA2BhK,IAA3B,CAAgCmE,GAAhC,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,IAAIK,IAAJ,EAAU9D,IAAV;;MACA,IAAIyD,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;QAClBK,IAAI,GAAGzF,MAAM,CAAC,KAAK0G,OAAL,CAAahI,MAAb,GAAsBA,MAAM,CAAC0G,GAAG,CAAC,CAAD,CAAJ,CAA5B,GAAuCA,GAAG,CAAC,CAAD,CAA3C,CAAb;QACAzD,IAAI,GAAG,YAAY8D,IAAnB;MACD,CAHD,MAGO;QACLA,IAAI,GAAGzF,MAAM,CAACoF,GAAG,CAAC,CAAD,CAAJ,CAAb;QACAzD,IAAI,GAAG8D,IAAP;MACD;;MAED,OAAO;QACLI,IAAI,EAAE,MADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK,IAHK;QAIL9D,IAJK;QAKLmE,MAAM,EAAE,CACN;UACED,IAAI,EAAE,MADR;UAEEP,GAAG,EAAEG,IAFP;UAGEA;QAHF,CADM;MALH,CAAP;IAaD;EACF;;EAEDiH,GAAG,CAAC9F,GAAD,EAAMlI,MAAN,EAAc;IACf,IAAI0G,GAAJ;;IACA,IAAIA,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkBsF,GAAlB,CAAsBjK,IAAtB,CAA2BmE,GAA3B,CAAV,EAA2C;MACzC,IAAInB,IAAJ,EAAU9D,IAAV;;MACA,IAAIyD,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;QAClBK,IAAI,GAAGzF,MAAM,CAAC,KAAK0G,OAAL,CAAahI,MAAb,GAAsBA,MAAM,CAAC0G,GAAG,CAAC,CAAD,CAAJ,CAA5B,GAAuCA,GAAG,CAAC,CAAD,CAA3C,CAAb;QACAzD,IAAI,GAAG,YAAY8D,IAAnB;MACD,CAHD,MAGO;QACL;QACA,IAAIkH,WAAJ;;QACA,GAAG;UACDA,WAAW,GAAGvH,GAAG,CAAC,CAAD,CAAjB;UACAA,GAAG,CAAC,CAAD,CAAH,GAAS,KAAKyB,KAAL,CAAWO,MAAX,CAAkBwF,UAAlB,CAA6BnK,IAA7B,CAAkC2C,GAAG,CAAC,CAAD,CAArC,EAA0C,CAA1C,CAAT;QACD,CAHD,QAGSuH,WAAW,KAAKvH,GAAG,CAAC,CAAD,CAH5B;;QAIAK,IAAI,GAAGzF,MAAM,CAACoF,GAAG,CAAC,CAAD,CAAJ,CAAb;;QACA,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,MAAf,EAAuB;UACrBzD,IAAI,GAAG,YAAYyD,GAAG,CAAC,CAAD,CAAtB;QACD,CAFD,MAEO;UACLzD,IAAI,GAAGyD,GAAG,CAAC,CAAD,CAAV;QACD;MACF;;MACD,OAAO;QACLS,IAAI,EAAE,MADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK,IAHK;QAIL9D,IAJK;QAKLmE,MAAM,EAAE,CACN;UACED,IAAI,EAAE,MADR;UAEEP,GAAG,EAAEG,IAFP;UAGEA;QAHF,CADM;MALH,CAAP;IAaD;EACF;;EAEDoH,UAAU,CAACjG,GAAD,EAAM5H,WAAN,EAAmB;IAC3B,MAAMoG,GAAG,GAAG,KAAKyB,KAAL,CAAWO,MAAX,CAAkB3B,IAAlB,CAAuBhD,IAAvB,CAA4BmE,GAA5B,CAAZ;;IACA,IAAIxB,GAAJ,EAAS;MACP,IAAIK,IAAJ;;MACA,IAAI,KAAKF,KAAL,CAAWG,KAAX,CAAiBkF,UAArB,EAAiC;QAC/BnF,IAAI,GAAG,KAAKiB,OAAL,CAAa7H,QAAb,GAAyB,KAAK6H,OAAL,CAAa5H,SAAb,GAAyB,KAAK4H,OAAL,CAAa5H,SAAb,CAAuBsG,GAAG,CAAC,CAAD,CAA1B,CAAzB,GAA0DpF,MAAM,CAACoF,GAAG,CAAC,CAAD,CAAJ,CAAzF,GAAqGA,GAAG,CAAC,CAAD,CAA/G;MACD,CAFD,MAEO;QACLK,IAAI,GAAGzF,MAAM,CAAC,KAAK0G,OAAL,CAAa1H,WAAb,GAA2BA,WAAW,CAACoG,GAAG,CAAC,CAAD,CAAJ,CAAtC,GAAiDA,GAAG,CAAC,CAAD,CAArD,CAAb;MACD;;MACD,OAAO;QACLS,IAAI,EAAE,MADD;QAELP,GAAG,EAAEF,GAAG,CAAC,CAAD,CAFH;QAGLK;MAHK,CAAP;IAKD;EACF;;AAttBa;AAytBhB;AACA;AACA;;;AACA,MAAMqB,KAAK,GAAG;EACZC,OAAO,EAAE,kBADG;EAEZC,IAAI,EAAE,sCAFM;EAGZE,MAAM,EAAE,2FAHI;EAIZO,EAAE,EAAE,oEAJQ;EAKZH,OAAO,EAAE,sCALG;EAMZI,UAAU,EAAE,yCANA;EAOZG,IAAI,EAAE,sCAPM;EAQZ5H,IAAI,EAAE,aAAa;EAAb,EACF,qEADE,CACoE;EADpE,EAEF,yBAFE,CAEwB;EAFxB,EAGF,+BAHE,CAG8B;EAH9B,EAIF,+BAJE,CAI8B;EAJ9B,EAKF,2CALE,CAK0C;EAL1C,EAMF,sDANE,CAMqD;EANrD,EAOF,oHAPE,CAOmH;EAPnH,EAQF,oGARE,CAQmG;EARnG,EASF,GAjBQ;EAkBZgK,GAAG,EAAE,iGAlBO;EAmBZE,KAAK,EAAE3H,QAnBK;EAoBZkI,QAAQ,EAAE,+CApBE;EAqBZ;EACA;EACAoC,UAAU,EAAE,sFAvBA;EAwBZrH,IAAI,EAAE;AAxBM,CAAd;AA2BAqB,KAAK,CAACiG,MAAN,GAAe,6BAAf;AACAjG,KAAK,CAACkG,MAAN,GAAe,8DAAf;AACAlG,KAAK,CAACmD,GAAN,GAAYjJ,IAAI,CAAC8F,KAAK,CAACmD,GAAP,CAAJ,CACT7J,OADS,CACD,OADC,EACQ0G,KAAK,CAACiG,MADd,EAET3M,OAFS,CAED,OAFC,EAEQ0G,KAAK,CAACkG,MAFd,EAGT1L,QAHS,EAAZ;AAKAwF,KAAK,CAACmG,MAAN,GAAe,uBAAf;AACAnG,KAAK,CAACoG,aAAN,GAAsBlM,IAAI,CAAC,eAAD,CAAJ,CACnBZ,OADmB,CACX,MADW,EACH0G,KAAK,CAACmG,MADH,EAEnB3L,QAFmB,EAAtB;AAIAwF,KAAK,CAACe,IAAN,GAAa7G,IAAI,CAAC8F,KAAK,CAACe,IAAP,CAAJ,CACVzH,OADU,CACF,OADE,EACO0G,KAAK,CAACmG,MADb,EAEV7M,OAFU,CAEF,IAFE,EAEI,iEAFJ,EAGVA,OAHU,CAGF,KAHE,EAGK,YAAY0G,KAAK,CAACmD,GAAN,CAAUvK,MAAtB,GAA+B,GAHpC,EAIV4B,QAJU,EAAb;AAMAwF,KAAK,CAACqG,IAAN,GAAa,gEACT,0EADS,GAET,sEAFS,GAGT,yEAHS,GAIT,wEAJS,GAKT,WALJ;AAMArG,KAAK,CAACsG,QAAN,GAAiB,8BAAjB;AACAtG,KAAK,CAAC7G,IAAN,GAAae,IAAI,CAAC8F,KAAK,CAAC7G,IAAP,EAAa,GAAb,CAAJ,CACVG,OADU,CACF,SADE,EACS0G,KAAK,CAACsG,QADf,EAEVhN,OAFU,CAEF,KAFE,EAEK0G,KAAK,CAACqG,IAFX,EAGV/M,OAHU,CAGF,WAHE,EAGW,0EAHX,EAIVkB,QAJU,EAAb;AAMAwF,KAAK,CAAC6D,SAAN,GAAkB3J,IAAI,CAAC8F,KAAK,CAACgG,UAAP,CAAJ,CACf1M,OADe,CACP,IADO,EACD0G,KAAK,CAACW,EADL,EAEfrH,OAFe,CAEP,SAFO,EAEI,eAFJ,EAGfA,OAHe,CAGP,WAHO,EAGM,EAHN,EAGU;AAHV,CAIfA,OAJe,CAIP,QAJO,EAIG,EAJH,EAKfA,OALe,CAKP,YALO,EAKO,SALP,EAMfA,OANe,CAMP,QANO,EAMG,gDANH,EAOfA,OAPe,CAOP,MAPO,EAOC,wBAPD,EAO2B;AAP3B,CAQfA,OARe,CAQP,MARO,EAQC,6DARD,EASfA,OATe,CASP,KATO,EASA0G,KAAK,CAACqG,IATN,EASY;AATZ,CAUf7L,QAVe,EAAlB;AAYAwF,KAAK,CAACY,UAAN,GAAmB1G,IAAI,CAAC8F,KAAK,CAACY,UAAP,CAAJ,CAChBtH,OADgB,CACR,WADQ,EACK0G,KAAK,CAAC6D,SADX,EAEhBrJ,QAFgB,EAAnB;AAIA;AACA;AACA;;AAEAwF,KAAK,CAACuG,MAAN,GAAe3K,KAAK,CAAC,EAAD,EAAKoE,KAAL,CAApB;AAEA;AACA;AACA;;AAEAA,KAAK,CAACzI,GAAN,GAAYqE,KAAK,CAAC,EAAD,EAAKoE,KAAK,CAACuG,MAAX,EAAmB;EAClClD,KAAK,EAAE,yBAAyB;EAAzB,EACH,wDADG,CACsD;EADtD,EAEH,sFAH8B,CAGyD;;AAHzD,CAAnB,CAAjB;AAMArD,KAAK,CAACzI,GAAN,CAAU8L,KAAV,GAAkBnJ,IAAI,CAAC8F,KAAK,CAACzI,GAAN,CAAU8L,KAAX,CAAJ,CACf/J,OADe,CACP,IADO,EACD0G,KAAK,CAACW,EADL,EAEfrH,OAFe,CAEP,SAFO,EAEI,eAFJ,EAGfA,OAHe,CAGP,YAHO,EAGO,SAHP,EAIfA,OAJe,CAIP,MAJO,EAIC,YAJD,EAKfA,OALe,CAKP,QALO,EAKG,gDALH,EAMfA,OANe,CAMP,MANO,EAMC,wBAND,EAM2B;AAN3B,CAOfA,OAPe,CAOP,MAPO,EAOC,6DAPD,EAQfA,OARe,CAQP,KARO,EAQA0G,KAAK,CAACqG,IARN,EAQY;AARZ,CASf7L,QATe,EAAlB;AAWAwF,KAAK,CAACzI,GAAN,CAAUsM,SAAV,GAAsB3J,IAAI,CAAC8F,KAAK,CAACgG,UAAP,CAAJ,CACnB1M,OADmB,CACX,IADW,EACL0G,KAAK,CAACW,EADD,EAEnBrH,OAFmB,CAEX,SAFW,EAEA,eAFA,EAGnBA,OAHmB,CAGX,WAHW,EAGE,EAHF,EAGM;AAHN,CAInBA,OAJmB,CAIX,OAJW,EAIF0G,KAAK,CAACzI,GAAN,CAAU8L,KAJR,EAIe;AAJf,CAKnB/J,OALmB,CAKX,YALW,EAKG,SALH,EAMnBA,OANmB,CAMX,QANW,EAMD,gDANC,EAOnBA,OAPmB,CAOX,MAPW,EAOH,wBAPG,EAOuB;AAPvB,CAQnBA,OARmB,CAQX,MARW,EAQH,6DARG,EASnBA,OATmB,CASX,KATW,EASJ0G,KAAK,CAACqG,IATF,EASQ;AATR,CAUnB7L,QAVmB,EAAtB;AAWA;AACA;AACA;;AAEAwF,KAAK,CAACnI,QAAN,GAAiB+D,KAAK,CAAC,EAAD,EAAKoE,KAAK,CAACuG,MAAX,EAAmB;EACvCpN,IAAI,EAAEe,IAAI,CACR,iCACE,4CADF,CAC+C;EAD/C,EAEE,sEAHM,CAAJ,CAIHZ,OAJG,CAIK,SAJL,EAIgB0G,KAAK,CAACsG,QAJtB,EAKHhN,OALG,CAKK,MALL,EAKa,WACb,qEADa,GAEb,6DAFa,GAGb,+BARA,EASHkB,QATG,EADiC;EAWvC2I,GAAG,EAAE,mEAXkC;EAYvC3C,OAAO,EAAE,wBAZ8B;EAavCJ,MAAM,EAAE1E,QAb+B;EAarB;EAClBkI,QAAQ,EAAE,kCAd6B;EAevCC,SAAS,EAAE3J,IAAI,CAAC8F,KAAK,CAACuG,MAAN,CAAaP,UAAd,CAAJ,CACR1M,OADQ,CACA,IADA,EACM0G,KAAK,CAACW,EADZ,EAERrH,OAFQ,CAEA,SAFA,EAEW,iBAFX,EAGRA,OAHQ,CAGA,UAHA,EAGY0G,KAAK,CAAC4D,QAHlB,EAIRtK,OAJQ,CAIA,YAJA,EAIc,SAJd,EAKRA,OALQ,CAKA,SALA,EAKW,EALX,EAMRA,OANQ,CAMA,OANA,EAMS,EANT,EAORA,OAPQ,CAOA,OAPA,EAOS,EAPT,EAQRkB,QARQ;AAf4B,CAAnB,CAAtB;AA0BA;AACA;AACA;;AACA,MAAM8F,MAAM,GAAG;EACbpH,MAAM,EAAE,6CADK;EAEbyM,QAAQ,EAAE,qCAFG;EAGbC,GAAG,EAAElK,QAHQ;EAIb0H,GAAG,EAAE,aACD,2BADC,CAC2B;EAD3B,EAED,0CAFC,CAE0C;EAF1C,EAGD,sBAHC,CAGsB;EAHtB,EAID,6BAJC,CAI6B;EAJ7B,EAKD,kCATS;EAS2B;EACxC7E,IAAI,EAAE,+CAVO;EAWb4F,OAAO,EAAE,yBAXI;EAYbE,MAAM,EAAE,uBAZK;EAabmC,aAAa,EAAE,uBAbF;EAcblC,QAAQ,EAAE;IACRG,MAAM,EAAE,0DADA;IAER;IACA;IACAS,SAAS,EAAE,4RAJH;IAKRC,SAAS,EAAE,gPALH,CAKoP;;EALpP,CAdG;EAqBbjF,IAAI,EAAE,qCArBO;EAsBbuF,EAAE,EAAE,uBAtBS;EAuBbC,GAAG,EAAEhK,QAvBQ;EAwBbiD,IAAI,EAAE,6EAxBO;EAyBbgG,WAAW,EAAE;AAzBA,CAAf,C,CA4BA;AACA;;AACArE,MAAM,CAACmG,YAAP,GAAsB,sCAAtB;AACAnG,MAAM,CAACqE,WAAP,GAAqBzK,IAAI,CAACoG,MAAM,CAACqE,WAAR,CAAJ,CAAyBrL,OAAzB,CAAiC,cAAjC,EAAiDgH,MAAM,CAACmG,YAAxD,EAAsEjM,QAAtE,EAArB,C,CAEA;;AACA8F,MAAM,CAACoG,SAAP,GAAmB,2CAAnB,C,CACA;AACA;;AACApG,MAAM,CAACqG,WAAP,GAAqB,6BAArB;AAEArG,MAAM,CAACgG,QAAP,GAAkBpM,IAAI,CAAC8F,KAAK,CAACsG,QAAP,CAAJ,CAAqBhN,OAArB,CAA6B,WAA7B,EAA0C,KAA1C,EAAiDkB,QAAjD,EAAlB;AAEA8F,MAAM,CAACgE,QAAP,CAAgBG,MAAhB,GAAyBvK,IAAI,CAACoG,MAAM,CAACgE,QAAP,CAAgBG,MAAjB,CAAJ,CACtBnL,OADsB,CACd,QADc,EACJgH,MAAM,CAACmG,YADH,EAEtBjM,QAFsB,EAAzB;AAIA8F,MAAM,CAACgE,QAAP,CAAgBY,SAAhB,GAA4BhL,IAAI,CAACoG,MAAM,CAACgE,QAAP,CAAgBY,SAAjB,EAA4B,GAA5B,CAAJ,CACzB5L,OADyB,CACjB,QADiB,EACPgH,MAAM,CAACmG,YADA,EAEzBjM,QAFyB,EAA5B;AAIA8F,MAAM,CAACgE,QAAP,CAAgBa,SAAhB,GAA4BjL,IAAI,CAACoG,MAAM,CAACgE,QAAP,CAAgBa,SAAjB,EAA4B,GAA5B,CAAJ,CACzB7L,OADyB,CACjB,QADiB,EACPgH,MAAM,CAACmG,YADA,EAEzBjM,QAFyB,EAA5B;AAIA8F,MAAM,CAACC,QAAP,GAAkB,6CAAlB;AAEAD,MAAM,CAACsG,OAAP,GAAiB,8BAAjB;AACAtG,MAAM,CAACuG,MAAP,GAAgB,8IAAhB;AACAvG,MAAM,CAACqF,QAAP,GAAkBzL,IAAI,CAACoG,MAAM,CAACqF,QAAR,CAAJ,CACfrM,OADe,CACP,QADO,EACGgH,MAAM,CAACsG,OADV,EAEftN,OAFe,CAEP,OAFO,EAEEgH,MAAM,CAACuG,MAFT,EAGfrM,QAHe,EAAlB;AAKA8F,MAAM,CAACwG,UAAP,GAAoB,6EAApB;AAEAxG,MAAM,CAAC8C,GAAP,GAAalJ,IAAI,CAACoG,MAAM,CAAC8C,GAAR,CAAJ,CACV9J,OADU,CACF,SADE,EACSgH,MAAM,CAACgG,QADhB,EAEVhN,OAFU,CAEF,WAFE,EAEWgH,MAAM,CAACwG,UAFlB,EAGVtM,QAHU,EAAb;AAKA8F,MAAM,CAAC2F,MAAP,GAAgB,qDAAhB;AACA3F,MAAM,CAACyG,KAAP,GAAe,sCAAf;AACAzG,MAAM,CAAC4F,MAAP,GAAgB,6DAAhB;AAEA5F,MAAM,CAAC/B,IAAP,GAAcrE,IAAI,CAACoG,MAAM,CAAC/B,IAAR,CAAJ,CACXjF,OADW,CACH,OADG,EACMgH,MAAM,CAAC2F,MADb,EAEX3M,OAFW,CAEH,MAFG,EAEKgH,MAAM,CAACyG,KAFZ,EAGXzN,OAHW,CAGH,OAHG,EAGMgH,MAAM,CAAC4F,MAHb,EAIX1L,QAJW,EAAd;AAMA8F,MAAM,CAAC6D,OAAP,GAAiBjK,IAAI,CAACoG,MAAM,CAAC6D,OAAR,CAAJ,CACd7K,OADc,CACN,OADM,EACGgH,MAAM,CAAC2F,MADV,EAEd3M,OAFc,CAEN,KAFM,EAEC0G,KAAK,CAACiG,MAFP,EAGdzL,QAHc,EAAjB;AAKA8F,MAAM,CAAC+D,MAAP,GAAgBnK,IAAI,CAACoG,MAAM,CAAC+D,MAAR,CAAJ,CACb/K,OADa,CACL,KADK,EACE0G,KAAK,CAACiG,MADR,EAEbzL,QAFa,EAAhB;AAIA8F,MAAM,CAACkG,aAAP,GAAuBtM,IAAI,CAACoG,MAAM,CAACkG,aAAR,EAAuB,GAAvB,CAAJ,CACpBlN,OADoB,CACZ,SADY,EACDgH,MAAM,CAAC6D,OADN,EAEpB7K,OAFoB,CAEZ,QAFY,EAEFgH,MAAM,CAAC+D,MAFL,EAGpB7J,QAHoB,EAAvB;AAKA;AACA;AACA;;AAEA8F,MAAM,CAACiG,MAAP,GAAgB3K,KAAK,CAAC,EAAD,EAAK0E,MAAL,CAArB;AAEA;AACA;AACA;;AAEAA,MAAM,CAACzI,QAAP,GAAkB+D,KAAK,CAAC,EAAD,EAAK0E,MAAM,CAACiG,MAAZ,EAAoB;EACzCS,MAAM,EAAE;IACNnF,KAAK,EAAE,UADD;IAENoF,MAAM,EAAE,gEAFF;IAGNC,MAAM,EAAE,aAHF;IAINC,MAAM,EAAE;EAJF,CADiC;EAOzCC,EAAE,EAAE;IACFvF,KAAK,EAAE,OADL;IAEFoF,MAAM,EAAE,4DAFN;IAGFC,MAAM,EAAE,WAHN;IAIFC,MAAM,EAAE;EAJN,CAPqC;EAazC5I,IAAI,EAAErE,IAAI,CAAC,yBAAD,CAAJ,CACHZ,OADG,CACK,OADL,EACcgH,MAAM,CAAC2F,MADrB,EAEHzL,QAFG,EAbmC;EAgBzC2J,OAAO,EAAEjK,IAAI,CAAC,+BAAD,CAAJ,CACNZ,OADM,CACE,OADF,EACWgH,MAAM,CAAC2F,MADlB,EAENzL,QAFM;AAhBgC,CAApB,CAAvB;AAqBA;AACA;AACA;;AAEA8F,MAAM,CAAC/I,GAAP,GAAaqE,KAAK,CAAC,EAAD,EAAK0E,MAAM,CAACiG,MAAZ,EAAoB;EACpCrN,MAAM,EAAEgB,IAAI,CAACoG,MAAM,CAACpH,MAAR,CAAJ,CAAoBI,OAApB,CAA4B,IAA5B,EAAkC,MAAlC,EAA0CkB,QAA1C,EAD4B;EAEpC6M,eAAe,EAAE,2EAFmB;EAGpCzB,GAAG,EAAE,kEAH+B;EAIpCE,UAAU,EAAE,4EAJwB;EAKpCJ,GAAG,EAAE,8CAL+B;EAMpC/G,IAAI,EAAE;AAN8B,CAApB,CAAlB;AASA2B,MAAM,CAAC/I,GAAP,CAAWqO,GAAX,GAAiB1L,IAAI,CAACoG,MAAM,CAAC/I,GAAP,CAAWqO,GAAZ,EAAiB,GAAjB,CAAJ,CACdtM,OADc,CACN,OADM,EACGgH,MAAM,CAAC/I,GAAP,CAAW8P,eADd,EAEd7M,QAFc,EAAjB;AAGA;AACA;AACA;;AAEA8F,MAAM,CAACjJ,MAAP,GAAgBuE,KAAK,CAAC,EAAD,EAAK0E,MAAM,CAAC/I,GAAZ,EAAiB;EACpCkO,EAAE,EAAEvL,IAAI,CAACoG,MAAM,CAACmF,EAAR,CAAJ,CAAgBnM,OAAhB,CAAwB,MAAxB,EAAgC,GAAhC,EAAqCkB,QAArC,EADgC;EAEpCmE,IAAI,EAAEzE,IAAI,CAACoG,MAAM,CAAC/I,GAAP,CAAWoH,IAAZ,CAAJ,CACHrF,OADG,CACK,MADL,EACa,eADb,EAEHA,OAFG,CAEK,SAFL,EAEgB,GAFhB,EAGHkB,QAHG;AAF8B,CAAjB,CAArB;AAQA;AACA;AACA;AACA;;AACA,SAAStC,WAAT,CAAqByG,IAArB,EAA2B;EACzB,OAAOA,IAAI,CACT;EADS,CAERrF,OAFI,CAEI,MAFJ,EAEY,QAFZ,EAGL;EAHK,CAIJA,OAJI,CAII,KAJJ,EAIW,QAJX,EAKL;EALK,CAMJA,OANI,CAMI,yBANJ,EAM+B,UAN/B,EAOL;EAPK,CAQJA,OARI,CAQI,IARJ,EAQU,QARV,EASL;EATK,CAUJA,OAVI,CAUI,8BAVJ,EAUoC,UAVpC,EAWL;EAXK,CAYJA,OAZI,CAYI,IAZJ,EAYU,QAZV,EAaL;EAbK,CAcJA,OAdI,CAcI,QAdJ,EAcc,QAdd,CAAP;AAeD;AAED;AACA;AACA;AACA;;;AACA,SAAS1B,MAAT,CAAgB+G,IAAhB,EAAsB;EACpB,IAAI2I,GAAG,GAAG,EAAV;EAAA,IACEzL,CADF;EAAA,IAEE5C,EAFF;EAIA,MAAMuE,CAAC,GAAGmB,IAAI,CAAC1C,MAAf;;EACA,KAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;IACtB5C,EAAE,GAAG0F,IAAI,CAAC4I,UAAL,CAAgB1L,CAAhB,CAAL;;IACA,IAAIyG,IAAI,CAACkF,MAAL,KAAgB,GAApB,EAAyB;MACvBvO,EAAE,GAAG,MAAMA,EAAE,CAACwO,QAAH,CAAY,EAAZ,CAAX;IACD;;IACDH,GAAG,IAAI,OAAOrO,EAAP,GAAY,GAAnB;EACD;;EAED,OAAOqO,GAAP;AACD;AAED;AACA;AACA;;;AACA,MAAMI,KAAN,CAAY;EACV/H,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKZ,MAAL,GAAc,EAAd;IACA,KAAKA,MAAL,CAAYoF,KAAZ,GAAoBlI,MAAM,CAACyL,MAAP,CAAc,IAAd,CAApB;IACA,KAAK/H,OAAL,GAAeA,OAAO,IAAItH,QAA1B;IACA,KAAKsH,OAAL,CAAazH,SAAb,GAAyB,KAAKyH,OAAL,CAAazH,SAAb,IAA0B,IAAIuH,SAAJ,EAAnD;IACA,KAAKvH,SAAL,GAAiB,KAAKyH,OAAL,CAAazH,SAA9B;IACA,KAAKA,SAAL,CAAeyH,OAAf,GAAyB,KAAKA,OAA9B;IACA,KAAKzH,SAAL,CAAesG,KAAf,GAAuB,IAAvB;IACA,KAAKmJ,WAAL,GAAmB,EAAnB;IACA,KAAKhJ,KAAL,GAAa;MACXC,MAAM,EAAE,KADG;MAEXiF,UAAU,EAAE,KAFD;MAGXjD,GAAG,EAAE;IAHM,CAAb;IAMA,MAAMd,KAAK,GAAG;MACZC,KAAK,EAAEA,KAAK,CAACuG,MADD;MAEZjG,MAAM,EAAEA,MAAM,CAACiG;IAFH,CAAd;;IAKA,IAAI,KAAK3G,OAAL,CAAa/H,QAAjB,EAA2B;MACzBkI,KAAK,CAACC,KAAN,GAAcA,KAAK,CAACnI,QAApB;MACAkI,KAAK,CAACO,MAAN,GAAeA,MAAM,CAACzI,QAAtB;IACD,CAHD,MAGO,IAAI,KAAK+H,OAAL,CAAarI,GAAjB,EAAsB;MAC3BwI,KAAK,CAACC,KAAN,GAAcA,KAAK,CAACzI,GAApB;;MACA,IAAI,KAAKqI,OAAL,CAAavI,MAAjB,EAAyB;QACvB0I,KAAK,CAACO,MAAN,GAAeA,MAAM,CAACjJ,MAAtB;MACD,CAFD,MAEO;QACL0I,KAAK,CAACO,MAAN,GAAeA,MAAM,CAAC/I,GAAtB;MACD;IACF;;IACD,KAAKY,SAAL,CAAe4H,KAAf,GAAuBA,KAAvB;EACD;EAED;AACF;AACA;;;EACkB,WAALA,KAAK,GAAG;IACjB,OAAO;MACLC,KADK;MAELM;IAFK,CAAP;EAID;EAED;AACF;AACA;;;EACY,OAAHuH,GAAG,CAAC/H,GAAD,EAAMF,OAAN,EAAe;IACvB,MAAMnB,KAAK,GAAG,IAAIiJ,KAAJ,CAAU9H,OAAV,CAAd;IACA,OAAOnB,KAAK,CAACoJ,GAAN,CAAU/H,GAAV,CAAP;EACD;EAED;AACF;AACA;;;EACkB,OAATgI,SAAS,CAAChI,GAAD,EAAMF,OAAN,EAAe;IAC7B,MAAMnB,KAAK,GAAG,IAAIiJ,KAAJ,CAAU9H,OAAV,CAAd;IACA,OAAOnB,KAAK,CAACQ,YAAN,CAAmBa,GAAnB,CAAP;EACD;EAED;AACF;AACA;;;EACE+H,GAAG,CAAC/H,GAAD,EAAM;IACPA,GAAG,GAAGA,GAAG,CACNxG,OADG,CACK,UADL,EACiB,IADjB,CAAN;IAGA,KAAKwH,WAAL,CAAiBhB,GAAjB,EAAsB,KAAKd,MAA3B;IAEA,IAAI+I,IAAJ;;IACA,OAAOA,IAAI,GAAG,KAAKH,WAAL,CAAiB1K,KAAjB,EAAd,EAAwC;MACtC,KAAK+B,YAAL,CAAkB8I,IAAI,CAACjI,GAAvB,EAA4BiI,IAAI,CAAC/I,MAAjC;IACD;;IAED,OAAO,KAAKA,MAAZ;EACD;EAED;AACF;AACA;;;EACE8B,WAAW,CAAChB,GAAD,EAAMd,MAAM,GAAG,EAAf,EAAmB;IAC5B,IAAI,KAAKY,OAAL,CAAa/H,QAAjB,EAA2B;MACzBiI,GAAG,GAAGA,GAAG,CAACxG,OAAJ,CAAY,KAAZ,EAAmB,MAAnB,EAA2BA,OAA3B,CAAmC,QAAnC,EAA6C,EAA7C,CAAN;IACD,CAFD,MAEO;MACLwG,GAAG,GAAGA,GAAG,CAACxG,OAAJ,CAAY,cAAZ,EAA4B,CAACG,CAAD,EAAIuO,OAAJ,EAAaC,IAAb,KAAsB;QACtD,OAAOD,OAAO,GAAG,OAAO9F,MAAP,CAAc+F,IAAI,CAAChM,MAAnB,CAAjB;MACD,CAFK,CAAN;IAGD;;IAED,IAAI6C,KAAJ,EAAWoJ,SAAX,EAAsBC,MAAtB,EAA8BC,oBAA9B;;IAEA,OAAOtI,GAAP,EAAY;MACV,IAAI,KAAKF,OAAL,CAAatI,UAAb,IACC,KAAKsI,OAAL,CAAatI,UAAb,CAAwB0I,KADzB,IAEC,KAAKJ,OAAL,CAAatI,UAAb,CAAwB0I,KAAxB,CAA8BiD,IAA9B,CAAoCoF,YAAD,IAAkB;QACtD,IAAIvJ,KAAK,GAAGuJ,YAAY,CAAChM,IAAb,CAAkB;UAAEoC,KAAK,EAAE;QAAT,CAAlB,EAAmCqB,GAAnC,EAAwCd,MAAxC,CAAZ,EAA6D;UAC3Dc,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;UACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;UACA,OAAO,IAAP;QACD;;QACD,OAAO,KAAP;MACD,CAPE,CAFL,EASM;QACJ;MACD,CAZS,CAcV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAe0H,KAAf,CAAqBC,GAArB,CAAZ,EAAuC;QACrCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;;QACA,IAAI6C,KAAK,CAACN,GAAN,CAAUvC,MAAV,KAAqB,CAArB,IAA0B+C,MAAM,CAAC/C,MAAP,GAAgB,CAA9C,EAAiD;UAC/C;UACA;UACA+C,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAN,CAA0BuC,GAA1B,IAAiC,IAAjC;QACD,CAJD,MAIO;UACLQ,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACD;MACD,CAzBS,CA2BV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAe+H,IAAf,CAAoBJ,GAApB,CAAZ,EAAsC;QACpCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACAiM,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB,CAFoC,CAGpC;;QACA,IAAIiM,SAAS,KAAKA,SAAS,CAACnJ,IAAV,KAAmB,WAAnB,IAAkCmJ,SAAS,CAACnJ,IAAV,KAAmB,MAA1D,CAAb,EAAgF;UAC9EmJ,SAAS,CAAC1J,GAAV,IAAiB,OAAOM,KAAK,CAACN,GAA9B;UACA0J,SAAS,CAACvJ,IAAV,IAAkB,OAAOG,KAAK,CAACH,IAA/B;UACA,KAAKiJ,WAAL,CAAiB,KAAKA,WAAL,CAAiB3L,MAAjB,GAA0B,CAA3C,EAA8C6D,GAA9C,GAAoDoI,SAAS,CAACvJ,IAA9D;QACD,CAJD,MAIO;UACLK,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACD;MACD,CAxCS,CA0CV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeiI,MAAf,CAAsBN,GAAtB,CAAZ,EAAwC;QACtCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA/CS,CAiDV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeqI,OAAf,CAAuBV,GAAvB,CAAZ,EAAyC;QACvCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAtDS,CAwDV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAewI,EAAf,CAAkBb,GAAlB,CAAZ,EAAoC;QAClCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA7DS,CA+DV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeyI,UAAf,CAA0Bd,GAA1B,CAAZ,EAA4C;QAC1CA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CApES,CAsEV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAe4I,IAAf,CAAoBjB,GAApB,CAAZ,EAAsC;QACpCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA3ES,CA6EV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAegB,IAAf,CAAoB2G,GAApB,CAAZ,EAAsC;QACpCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAlFS,CAoFV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAegL,GAAf,CAAmBrD,GAAnB,CAAZ,EAAqC;QACnCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACAiM,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB;;QACA,IAAIiM,SAAS,KAAKA,SAAS,CAACnJ,IAAV,KAAmB,WAAnB,IAAkCmJ,SAAS,CAACnJ,IAAV,KAAmB,MAA1D,CAAb,EAAgF;UAC9EmJ,SAAS,CAAC1J,GAAV,IAAiB,OAAOM,KAAK,CAACN,GAA9B;UACA0J,SAAS,CAACvJ,IAAV,IAAkB,OAAOG,KAAK,CAACN,GAA/B;UACA,KAAKoJ,WAAL,CAAiB,KAAKA,WAAL,CAAiB3L,MAAjB,GAA0B,CAA3C,EAA8C6D,GAA9C,GAAoDoI,SAAS,CAACvJ,IAA9D;QACD,CAJD,MAIO,IAAI,CAAC,KAAKK,MAAL,CAAYoF,KAAZ,CAAkBtF,KAAK,CAACsE,GAAxB,CAAL,EAAmC;UACxC,KAAKpE,MAAL,CAAYoF,KAAZ,CAAkBtF,KAAK,CAACsE,GAAxB,IAA+B;YAC7BvI,IAAI,EAAEiE,KAAK,CAACjE,IADiB;YAE7B6D,KAAK,EAAEI,KAAK,CAACJ;UAFgB,CAA/B;QAID;;QACD;MACD,CAnGS,CAqGV;;;MACA,IAAII,KAAK,GAAG,KAAK3G,SAAL,CAAekL,KAAf,CAAqBvD,GAArB,CAAZ,EAAuC;QACrCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA1GS,CA4GV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeyL,QAAf,CAAwB9D,GAAxB,CAAZ,EAA0C;QACxCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAjHS,CAmHV;MACA;;;MACAqJ,MAAM,GAAGrI,GAAT;;MACA,IAAI,KAAKF,OAAL,CAAatI,UAAb,IAA2B,KAAKsI,OAAL,CAAatI,UAAb,CAAwBgR,UAAvD,EAAmE;QACjE,IAAIC,UAAU,GAAGC,QAAjB;QACA,MAAMC,OAAO,GAAG3I,GAAG,CAACnC,KAAJ,CAAU,CAAV,CAAhB;QACA,IAAI+K,SAAJ;QACA,KAAK9I,OAAL,CAAatI,UAAb,CAAwBgR,UAAxB,CAAmCK,OAAnC,CAA2C,UAASC,aAAT,EAAwB;UACjEF,SAAS,GAAGE,aAAa,CAACvM,IAAd,CAAmB;YAAEoC,KAAK,EAAE;UAAT,CAAnB,EAAoCgK,OAApC,CAAZ;;UACA,IAAI,OAAOC,SAAP,KAAqB,QAArB,IAAiCA,SAAS,IAAI,CAAlD,EAAqD;YAAEH,UAAU,GAAGjG,IAAI,CAACC,GAAL,CAASgG,UAAT,EAAqBG,SAArB,CAAb;UAA+C;QACvG,CAHD;;QAIA,IAAIH,UAAU,GAAGC,QAAb,IAAyBD,UAAU,IAAI,CAA3C,EAA8C;UAC5CJ,MAAM,GAAGrI,GAAG,CAAC9F,SAAJ,CAAc,CAAd,EAAiBuO,UAAU,GAAG,CAA9B,CAAT;QACD;MACF;;MACD,IAAI,KAAK3J,KAAL,CAAWiC,GAAX,KAAmB/B,KAAK,GAAG,KAAK3G,SAAL,CAAe0L,SAAf,CAAyBsE,MAAzB,CAA3B,CAAJ,EAAkE;QAChED,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB;;QACA,IAAImM,oBAAoB,IAAIF,SAAS,CAACnJ,IAAV,KAAmB,WAA/C,EAA4D;UAC1DmJ,SAAS,CAAC1J,GAAV,IAAiB,OAAOM,KAAK,CAACN,GAA9B;UACA0J,SAAS,CAACvJ,IAAV,IAAkB,OAAOG,KAAK,CAACH,IAA/B;UACA,KAAKiJ,WAAL,CAAiBzK,GAAjB;UACA,KAAKyK,WAAL,CAAiB,KAAKA,WAAL,CAAiB3L,MAAjB,GAA0B,CAA3C,EAA8C6D,GAA9C,GAAoDoI,SAAS,CAACvJ,IAA9D;QACD,CALD,MAKO;UACLK,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACDsJ,oBAAoB,GAAID,MAAM,CAAClM,MAAP,KAAkB6D,GAAG,CAAC7D,MAA9C;QACA6D,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA;MACD,CA/IS,CAiJV;;;MACA,IAAI6C,KAAK,GAAG,KAAK3G,SAAL,CAAewG,IAAf,CAAoBmB,GAApB,CAAZ,EAAsC;QACpCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACAiM,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB;;QACA,IAAIiM,SAAS,IAAIA,SAAS,CAACnJ,IAAV,KAAmB,MAApC,EAA4C;UAC1CmJ,SAAS,CAAC1J,GAAV,IAAiB,OAAOM,KAAK,CAACN,GAA9B;UACA0J,SAAS,CAACvJ,IAAV,IAAkB,OAAOG,KAAK,CAACH,IAA/B;UACA,KAAKiJ,WAAL,CAAiBzK,GAAjB;UACA,KAAKyK,WAAL,CAAiB,KAAKA,WAAL,CAAiB3L,MAAjB,GAA0B,CAA3C,EAA8C6D,GAA9C,GAAoDoI,SAAS,CAACvJ,IAA9D;QACD,CALD,MAKO;UACLK,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACD;MACD;;MAED,IAAIgB,GAAJ,EAAS;QACP,MAAM+I,MAAM,GAAG,4BAA4B/I,GAAG,CAACyH,UAAJ,CAAe,CAAf,CAA3C;;QACA,IAAI,KAAK3H,OAAL,CAAa3H,MAAjB,EAAyB;UACvB+F,OAAO,CAAC8K,KAAR,CAAcD,MAAd;UACA;QACD,CAHD,MAGO;UACL,MAAM,IAAIE,KAAJ,CAAUF,MAAV,CAAN;QACD;MACF;IACF;;IAED,KAAKjK,KAAL,CAAWiC,GAAX,GAAiB,IAAjB;IACA,OAAO7B,MAAP;EACD;;EAEDsB,MAAM,CAACR,GAAD,EAAMd,MAAM,GAAG,EAAf,EAAmB;IACvB,KAAK4I,WAAL,CAAiBvK,IAAjB,CAAsB;MAAEyC,GAAF;MAAOd;IAAP,CAAtB;IACA,OAAOA,MAAP;EACD;EAED;AACF;AACA;;;EACEC,YAAY,CAACa,GAAD,EAAMd,MAAM,GAAG,EAAf,EAAmB;IAC7B,IAAIF,KAAJ,EAAWoJ,SAAX,EAAsBC,MAAtB,CAD6B,CAG7B;;IACA,IAAI5D,SAAS,GAAGzE,GAAhB;IACA,IAAIpD,KAAJ;IACA,IAAIsM,YAAJ,EAAkBxE,QAAlB,CAN6B,CAQ7B;;IACA,IAAI,KAAKxF,MAAL,CAAYoF,KAAhB,EAAuB;MACrB,MAAMA,KAAK,GAAGlI,MAAM,CAAC+M,IAAP,CAAY,KAAKjK,MAAL,CAAYoF,KAAxB,CAAd;;MACA,IAAIA,KAAK,CAACnI,MAAN,GAAe,CAAnB,EAAsB;QACpB,OAAO,CAACS,KAAK,GAAG,KAAKvE,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BkG,aAA5B,CAA0C7K,IAA1C,CAA+C4I,SAA/C,CAAT,KAAuE,IAA9E,EAAoF;UAClF,IAAIH,KAAK,CAAC8E,QAAN,CAAexM,KAAK,CAAC,CAAD,CAAL,CAASiB,KAAT,CAAejB,KAAK,CAAC,CAAD,CAAL,CAASyM,WAAT,CAAqB,GAArB,IAA4B,CAA3C,EAA8C,CAAC,CAA/C,CAAf,CAAJ,EAAuE;YACrE5E,SAAS,GAAGA,SAAS,CAAC5G,KAAV,CAAgB,CAAhB,EAAmBjB,KAAK,CAAC2I,KAAzB,IAAkC,GAAlC,GAAwCnH,YAAY,CAAC,GAAD,EAAMxB,KAAK,CAAC,CAAD,CAAL,CAAST,MAAT,GAAkB,CAAxB,CAApD,GAAiF,GAAjF,GAAuFsI,SAAS,CAAC5G,KAAV,CAAgB,KAAKxF,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BkG,aAA5B,CAA0CpB,SAA1D,CAAnG;UACD;QACF;MACF;IACF,CAlB4B,CAmB7B;;;IACA,OAAO,CAAC1I,KAAK,GAAG,KAAKvE,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BoG,SAA5B,CAAsC/K,IAAtC,CAA2C4I,SAA3C,CAAT,KAAmE,IAA1E,EAAgF;MAC9EA,SAAS,GAAGA,SAAS,CAAC5G,KAAV,CAAgB,CAAhB,EAAmBjB,KAAK,CAAC2I,KAAzB,IAAkC,GAAlC,GAAwCnH,YAAY,CAAC,GAAD,EAAMxB,KAAK,CAAC,CAAD,CAAL,CAAST,MAAT,GAAkB,CAAxB,CAApD,GAAiF,GAAjF,GAAuFsI,SAAS,CAAC5G,KAAV,CAAgB,KAAKxF,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BoG,SAA5B,CAAsCtB,SAAtD,CAAnG;IACD,CAtB4B,CAwB7B;;;IACA,OAAO,CAAC1I,KAAK,GAAG,KAAKvE,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BqG,WAA5B,CAAwChL,IAAxC,CAA6C4I,SAA7C,CAAT,KAAqE,IAA5E,EAAkF;MAChFA,SAAS,GAAGA,SAAS,CAAC5G,KAAV,CAAgB,CAAhB,EAAmBjB,KAAK,CAAC2I,KAAN,GAAc3I,KAAK,CAAC,CAAD,CAAL,CAAST,MAAvB,GAAgC,CAAnD,IAAwD,IAAxD,GAA+DsI,SAAS,CAAC5G,KAAV,CAAgB,KAAKxF,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BqG,WAA5B,CAAwCvB,SAAxD,CAA3E;MACA,KAAKjN,SAAL,CAAe4H,KAAf,CAAqBO,MAArB,CAA4BqG,WAA5B,CAAwCvB,SAAxC;IACD;;IAED,OAAOtF,GAAP,EAAY;MACV,IAAI,CAACkJ,YAAL,EAAmB;QACjBxE,QAAQ,GAAG,EAAX;MACD;;MACDwE,YAAY,GAAG,KAAf,CAJU,CAMV;;MACA,IAAI,KAAKpJ,OAAL,CAAatI,UAAb,IACC,KAAKsI,OAAL,CAAatI,UAAb,CAAwBgJ,MADzB,IAEC,KAAKV,OAAL,CAAatI,UAAb,CAAwBgJ,MAAxB,CAA+B2C,IAA/B,CAAqCoF,YAAD,IAAkB;QACvD,IAAIvJ,KAAK,GAAGuJ,YAAY,CAAChM,IAAb,CAAkB;UAAEoC,KAAK,EAAE;QAAT,CAAlB,EAAmCqB,GAAnC,EAAwCd,MAAxC,CAAZ,EAA6D;UAC3Dc,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;UACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;UACA,OAAO,IAAP;QACD;;QACD,OAAO,KAAP;MACD,CAPE,CAFL,EASM;QACJ;MACD,CAlBS,CAoBV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAee,MAAf,CAAsB4G,GAAtB,CAAZ,EAAwC;QACtCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAzBS,CA2BV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeiL,GAAf,CAAmBtD,GAAnB,CAAZ,EAAqC;QACnCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACAiM,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB;;QACA,IAAIiM,SAAS,IAAIpJ,KAAK,CAACC,IAAN,KAAe,MAA5B,IAAsCmJ,SAAS,CAACnJ,IAAV,KAAmB,MAA7D,EAAqE;UACnEmJ,SAAS,CAAC1J,GAAV,IAAiBM,KAAK,CAACN,GAAvB;UACA0J,SAAS,CAACvJ,IAAV,IAAkBG,KAAK,CAACH,IAAxB;QACD,CAHD,MAGO;UACLK,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACD;MACD,CAtCS,CAwCV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeoG,IAAf,CAAoBuB,GAApB,CAAZ,EAAsC;QACpCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA7CS,CA+CV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAegM,OAAf,CAAuBrE,GAAvB,EAA4B,KAAKd,MAAL,CAAYoF,KAAxC,CAAZ,EAA4D;QAC1DtE,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACAiM,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB;;QACA,IAAIiM,SAAS,IAAIpJ,KAAK,CAACC,IAAN,KAAe,MAA5B,IAAsCmJ,SAAS,CAACnJ,IAAV,KAAmB,MAA7D,EAAqE;UACnEmJ,SAAS,CAAC1J,GAAV,IAAiBM,KAAK,CAACN,GAAvB;UACA0J,SAAS,CAACvJ,IAAV,IAAkBG,KAAK,CAACH,IAAxB;QACD,CAHD,MAGO;UACLK,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACD;MACD,CA1DS,CA4DV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAemM,QAAf,CAAwBxE,GAAxB,EAA6ByE,SAA7B,EAAwCC,QAAxC,CAAZ,EAA+D;QAC7D1E,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAjES,CAmEV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAemN,QAAf,CAAwBxF,GAAxB,CAAZ,EAA0C;QACxCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAxES,CA0EV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAesN,EAAf,CAAkB3F,GAAlB,CAAZ,EAAoC;QAClCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA/ES,CAiFV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAeuN,GAAf,CAAmB5F,GAAnB,CAAZ,EAAqC;QACnCA,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CAtFS,CAwFV;;;MACA,IAAIA,KAAK,GAAG,KAAK3G,SAAL,CAAewN,QAAf,CAAwB7F,GAAxB,EAA6BlI,MAA7B,CAAZ,EAAkD;QAChDkI,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CA7FS,CA+FV;;;MACA,IAAI,CAAC,KAAKF,KAAL,CAAWC,MAAZ,KAAuBC,KAAK,GAAG,KAAK3G,SAAL,CAAeyN,GAAf,CAAmB9F,GAAnB,EAAwBlI,MAAxB,CAA/B,CAAJ,EAAqE;QACnEkI,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;QACA+C,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACA;MACD,CApGS,CAsGV;MACA;;;MACAqJ,MAAM,GAAGrI,GAAT;;MACA,IAAI,KAAKF,OAAL,CAAatI,UAAb,IAA2B,KAAKsI,OAAL,CAAatI,UAAb,CAAwB8R,WAAvD,EAAoE;QAClE,IAAIb,UAAU,GAAGC,QAAjB;QACA,MAAMC,OAAO,GAAG3I,GAAG,CAACnC,KAAJ,CAAU,CAAV,CAAhB;QACA,IAAI+K,SAAJ;QACA,KAAK9I,OAAL,CAAatI,UAAb,CAAwB8R,WAAxB,CAAoCT,OAApC,CAA4C,UAASC,aAAT,EAAwB;UAClEF,SAAS,GAAGE,aAAa,CAACvM,IAAd,CAAmB;YAAEoC,KAAK,EAAE;UAAT,CAAnB,EAAoCgK,OAApC,CAAZ;;UACA,IAAI,OAAOC,SAAP,KAAqB,QAArB,IAAiCA,SAAS,IAAI,CAAlD,EAAqD;YAAEH,UAAU,GAAGjG,IAAI,CAACC,GAAL,CAASgG,UAAT,EAAqBG,SAArB,CAAb;UAA+C;QACvG,CAHD;;QAIA,IAAIH,UAAU,GAAGC,QAAb,IAAyBD,UAAU,IAAI,CAA3C,EAA8C;UAC5CJ,MAAM,GAAGrI,GAAG,CAAC9F,SAAJ,CAAc,CAAd,EAAiBuO,UAAU,GAAG,CAA9B,CAAT;QACD;MACF;;MACD,IAAIzJ,KAAK,GAAG,KAAK3G,SAAL,CAAe4N,UAAf,CAA0BoC,MAA1B,EAAkCjQ,WAAlC,CAAZ,EAA4D;QAC1D4H,GAAG,GAAGA,GAAG,CAAC9F,SAAJ,CAAc8E,KAAK,CAACN,GAAN,CAAUvC,MAAxB,CAAN;;QACA,IAAI6C,KAAK,CAACN,GAAN,CAAUb,KAAV,CAAgB,CAAC,CAAjB,MAAwB,GAA5B,EAAiC;UAAE;UACjC6G,QAAQ,GAAG1F,KAAK,CAACN,GAAN,CAAUb,KAAV,CAAgB,CAAC,CAAjB,CAAX;QACD;;QACDqL,YAAY,GAAG,IAAf;QACAd,SAAS,GAAGlJ,MAAM,CAACA,MAAM,CAAC/C,MAAP,GAAgB,CAAjB,CAAlB;;QACA,IAAIiM,SAAS,IAAIA,SAAS,CAACnJ,IAAV,KAAmB,MAApC,EAA4C;UAC1CmJ,SAAS,CAAC1J,GAAV,IAAiBM,KAAK,CAACN,GAAvB;UACA0J,SAAS,CAACvJ,IAAV,IAAkBG,KAAK,CAACH,IAAxB;QACD,CAHD,MAGO;UACLK,MAAM,CAAC3B,IAAP,CAAYyB,KAAZ;QACD;;QACD;MACD;;MAED,IAAIgB,GAAJ,EAAS;QACP,MAAM+I,MAAM,GAAG,4BAA4B/I,GAAG,CAACyH,UAAJ,CAAe,CAAf,CAA3C;;QACA,IAAI,KAAK3H,OAAL,CAAa3H,MAAjB,EAAyB;UACvB+F,OAAO,CAAC8K,KAAR,CAAcD,MAAd;UACA;QACD,CAHD,MAGO;UACL,MAAM,IAAIE,KAAJ,CAAUF,MAAV,CAAN;QACD;MACF;IACF;;IAED,OAAO7J,MAAP;EACD;;AAlcS;AAqcZ;AACA;AACA;;;AACA,MAAMqK,QAAN,CAAe;EACb1J,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAO,IAAItH,QAA1B;EACD;;EAED4H,IAAI,CAACA,IAAD,EAAOoJ,UAAP,EAAmBzM,OAAnB,EAA4B;IAC9B,MAAMwD,IAAI,GAAG,CAACiJ,UAAU,IAAI,EAAf,EAAmB5M,KAAnB,CAAyB,KAAzB,EAAgC,CAAhC,CAAb;;IACA,IAAI,KAAKkD,OAAL,CAAalI,SAAjB,EAA4B;MAC1B,MAAM4P,GAAG,GAAG,KAAK1H,OAAL,CAAalI,SAAb,CAAuBwI,IAAvB,EAA6BG,IAA7B,CAAZ;;MACA,IAAIiH,GAAG,IAAI,IAAP,IAAeA,GAAG,KAAKpH,IAA3B,EAAiC;QAC/BrD,OAAO,GAAG,IAAV;QACAqD,IAAI,GAAGoH,GAAP;MACD;IACF;;IAEDpH,IAAI,GAAGA,IAAI,CAAC5G,OAAL,CAAa,KAAb,EAAoB,EAApB,IAA0B,IAAjC;;IAEA,IAAI,CAAC+G,IAAL,EAAW;MACT,OAAO,iBACFxD,OAAO,GAAGqD,IAAH,GAAUhH,MAAM,CAACgH,IAAD,EAAO,IAAP,CADrB,IAEH,iBAFJ;IAGD;;IAED,OAAO,uBACH,KAAKN,OAAL,CAAajI,UADV,GAEHuB,MAAM,CAACmH,IAAD,CAFH,GAGH,IAHG,IAIFxD,OAAO,GAAGqD,IAAH,GAAUhH,MAAM,CAACgH,IAAD,EAAO,IAAP,CAJrB,IAKH,iBALJ;EAMD;EAED;AACF;AACA;;;EACEU,UAAU,CAAC2I,KAAD,EAAQ;IAChB,OAAQ,iBAAgBA,KAAM,iBAA9B;EACD;;EAEDpQ,IAAI,CAACA,IAAD,EAAO;IACT,OAAOA,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEqH,OAAO,CAAC7B,IAAD,EAAOb,KAAP,EAAcU,GAAd,EAAmBgL,OAAnB,EAA4B;IACjC,IAAI,KAAK5J,OAAL,CAAapI,SAAjB,EAA4B;MAC1B,MAAMiS,EAAE,GAAG,KAAK7J,OAAL,CAAanI,YAAb,GAA4B+R,OAAO,CAACE,IAAR,CAAalL,GAAb,CAAvC;MACA,OAAQ,KAAIV,KAAM,QAAO2L,EAAG,KAAI9K,IAAK,MAAKb,KAAM,KAAhD;IACD,CAJgC,CAMjC;;;IACA,OAAQ,KAAIA,KAAM,IAAGa,IAAK,MAAKb,KAAM,KAArC;EACD;;EAED6C,EAAE,GAAG;IACH,OAAO,KAAKf,OAAL,CAAavH,KAAb,GAAqB,SAArB,GAAiC,QAAxC;EACD;;EAED0I,IAAI,CAAC4I,IAAD,EAAO/H,OAAP,EAAgBC,KAAhB,EAAuB;IACzB,MAAM9C,IAAI,GAAG6C,OAAO,GAAG,IAAH,GAAU,IAA9B;IAAA,MACEgI,QAAQ,GAAIhI,OAAO,IAAIC,KAAK,KAAK,CAAtB,GAA4B,aAAaA,KAAb,GAAqB,GAAjD,GAAwD,EADrE;IAEA,OAAO,MAAM9C,IAAN,GAAa6K,QAAb,GAAwB,KAAxB,GAAgCD,IAAhC,GAAuC,IAAvC,GAA8C5K,IAA9C,GAAqD,KAA5D;EACD;EAED;AACF;AACA;;;EACE8K,QAAQ,CAAClL,IAAD,EAAO;IACb,OAAQ,OAAMA,IAAK,SAAnB;EACD;;EAEDmL,QAAQ,CAAClH,OAAD,EAAU;IAChB,OAAO,aACFA,OAAO,GAAG,aAAH,GAAmB,EADxB,IAEH,6BAFG,IAGF,KAAKhD,OAAL,CAAavH,KAAb,GAAqB,IAArB,GAA4B,EAH1B,IAIH,IAJJ;EAKD;EAED;AACF;AACA;;;EACEwL,SAAS,CAAClF,IAAD,EAAO;IACd,OAAQ,MAAKA,IAAK,QAAlB;EACD;EAED;AACF;AACA;AACA;;;EACE0E,KAAK,CAACE,MAAD,EAASoG,IAAT,EAAe;IAClB,IAAIA,IAAJ,EAAUA,IAAI,GAAI,UAASA,IAAK,UAAtB;IAEV,OAAO,cACH,WADG,GAEHpG,MAFG,GAGH,YAHG,GAIHoG,IAJG,GAKH,YALJ;EAMD;EAED;AACF;AACA;;;EACEI,QAAQ,CAACC,OAAD,EAAU;IAChB,OAAQ,SAAQA,OAAQ,SAAxB;EACD;;EAEDC,SAAS,CAACD,OAAD,EAAUE,KAAV,EAAiB;IACxB,MAAMnL,IAAI,GAAGmL,KAAK,CAAC3G,MAAN,GAAe,IAAf,GAAsB,IAAnC;IACA,MAAMH,GAAG,GAAG8G,KAAK,CAAC1G,KAAN,GACP,IAAGzE,IAAK,WAAUmL,KAAK,CAAC1G,KAAM,IADvB,GAEP,IAAGzE,IAAK,GAFb;IAGA,OAAOqE,GAAG,GAAG4G,OAAN,GAAiB,KAAIjL,IAAK,KAAjC;EACD;EAED;AACF;AACA;AACA;;;EACEiI,MAAM,CAACrI,IAAD,EAAO;IACX,OAAQ,WAAUA,IAAK,WAAvB;EACD;EAED;AACF;AACA;;;EACEyI,EAAE,CAACzI,IAAD,EAAO;IACP,OAAQ,OAAMA,IAAK,OAAnB;EACD;EAED;AACF;AACA;;;EACE2G,QAAQ,CAAC3G,IAAD,EAAO;IACb,OAAQ,SAAQA,IAAK,SAArB;EACD;;EAED8G,EAAE,GAAG;IACH,OAAO,KAAK7F,OAAL,CAAavH,KAAb,GAAqB,OAArB,GAA+B,MAAtC;EACD;EAED;AACF;AACA;;;EACEqN,GAAG,CAAC/G,IAAD,EAAO;IACR,OAAQ,QAAOA,IAAK,QAApB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEJ,IAAI,CAAC1D,IAAD,EAAO6D,KAAP,EAAcC,IAAd,EAAoB;IACtB9D,IAAI,GAAGF,QAAQ,CAAC,KAAKiF,OAAL,CAAa7H,QAAd,EAAwB,KAAK6H,OAAL,CAAaxI,OAArC,EAA8CyD,IAA9C,CAAf;;IACA,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAO8D,IAAP;IACD;;IACD,IAAI2I,GAAG,GAAG,cAAczM,IAAd,GAAqB,GAA/B;;IACA,IAAI6D,KAAJ,EAAW;MACT4I,GAAG,IAAI,aAAa5I,KAAb,GAAqB,GAA5B;IACD;;IACD4I,GAAG,IAAI,MAAM3I,IAAN,GAAa,MAApB;IACA,OAAO2I,GAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6C,KAAK,CAACtP,IAAD,EAAO6D,KAAP,EAAcC,IAAd,EAAoB;IACvB9D,IAAI,GAAGF,QAAQ,CAAC,KAAKiF,OAAL,CAAa7H,QAAd,EAAwB,KAAK6H,OAAL,CAAaxI,OAArC,EAA8CyD,IAA9C,CAAf;;IACA,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAO8D,IAAP;IACD;;IAED,IAAI2I,GAAG,GAAI,aAAYzM,IAAK,UAAS8D,IAAK,GAA1C;;IACA,IAAID,KAAJ,EAAW;MACT4I,GAAG,IAAK,WAAU5I,KAAM,GAAxB;IACD;;IACD4I,GAAG,IAAI,KAAK1H,OAAL,CAAavH,KAAb,GAAqB,IAArB,GAA4B,GAAnC;IACA,OAAOiP,GAAP;EACD;;EAED3I,IAAI,CAACA,IAAD,EAAO;IACT,OAAOA,IAAP;EACD;;AAhMY;AAmMf;AACA;AACA;AACA;;;AACA,MAAMyL,YAAN,CAAmB;EACjB;EACApD,MAAM,CAACrI,IAAD,EAAO;IACX,OAAOA,IAAP;EACD;;EAEDyI,EAAE,CAACzI,IAAD,EAAO;IACP,OAAOA,IAAP;EACD;;EAED2G,QAAQ,CAAC3G,IAAD,EAAO;IACb,OAAOA,IAAP;EACD;;EAED+G,GAAG,CAAC/G,IAAD,EAAO;IACR,OAAOA,IAAP;EACD;;EAEDxF,IAAI,CAACwF,IAAD,EAAO;IACT,OAAOA,IAAP;EACD;;EAEDA,IAAI,CAACA,IAAD,EAAO;IACT,OAAOA,IAAP;EACD;;EAEDJ,IAAI,CAAC1D,IAAD,EAAO6D,KAAP,EAAcC,IAAd,EAAoB;IACtB,OAAO,KAAKA,IAAZ;EACD;;EAEDwL,KAAK,CAACtP,IAAD,EAAO6D,KAAP,EAAcC,IAAd,EAAoB;IACvB,OAAO,KAAKA,IAAZ;EACD;;EAED8G,EAAE,GAAG;IACH,OAAO,EAAP;EACD;;AApCgB;AAuCnB;AACA;AACA;;;AACA,MAAM4E,OAAN,CAAc;EACZ1K,WAAW,GAAG;IACZ,KAAK2K,IAAL,GAAY,EAAZ;EACD;EAED;AACF;AACA;;;EACEC,SAAS,CAACC,KAAD,EAAQ;IACf,OAAOA,KAAK,CACT7Q,WADI,GAEJsD,IAFI,GAGL;IAHK,CAIJ3D,OAJI,CAII,iBAJJ,EAIuB,EAJvB,EAKL;IALK,CAMJA,OANI,CAMI,+DANJ,EAMqE,EANrE,EAOJA,OAPI,CAOI,KAPJ,EAOW,GAPX,CAAP;EAQD;EAED;AACF;AACA;AACA;AACA;;;EACEmR,eAAe,CAACC,YAAD,EAAeC,QAAf,EAAyB;IACtC,IAAIjB,IAAI,GAAGgB,YAAX;IACA,IAAIE,oBAAoB,GAAG,CAA3B;;IACA,IAAI,KAAKN,IAAL,CAAUlO,cAAV,CAAyBsN,IAAzB,CAAJ,EAAoC;MAClCkB,oBAAoB,GAAG,KAAKN,IAAL,CAAUI,YAAV,CAAvB;;MACA,GAAG;QACDE,oBAAoB;QACpBlB,IAAI,GAAGgB,YAAY,GAAG,GAAf,GAAqBE,oBAA5B;MACD,CAHD,QAGS,KAAKN,IAAL,CAAUlO,cAAV,CAAyBsN,IAAzB,CAHT;IAID;;IACD,IAAI,CAACiB,QAAL,EAAe;MACb,KAAKL,IAAL,CAAUI,YAAV,IAA0BE,oBAA1B;MACA,KAAKN,IAAL,CAAUZ,IAAV,IAAkB,CAAlB;IACD;;IACD,OAAOA,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEA,IAAI,CAACc,KAAD,EAAQ5K,OAAO,GAAG,EAAlB,EAAsB;IACxB,MAAM8J,IAAI,GAAG,KAAKa,SAAL,CAAeC,KAAf,CAAb;IACA,OAAO,KAAKC,eAAL,CAAqBf,IAArB,EAA2B9J,OAAO,CAACiL,MAAnC,CAAP;EACD;;AAlDW;AAqDd;AACA;AACA;;;AACA,MAAMC,MAAN,CAAa;EACXnL,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAO,IAAItH,QAA1B;IACA,KAAKsH,OAAL,CAAa9H,QAAb,GAAwB,KAAK8H,OAAL,CAAa9H,QAAb,IAAyB,IAAIuR,QAAJ,EAAjD;IACA,KAAKvR,QAAL,GAAgB,KAAK8H,OAAL,CAAa9H,QAA7B;IACA,KAAKA,QAAL,CAAc8H,OAAd,GAAwB,KAAKA,OAA7B;IACA,KAAKmL,YAAL,GAAoB,IAAIX,YAAJ,EAApB;IACA,KAAKZ,OAAL,GAAe,IAAIa,OAAJ,EAAf;EACD;EAED;AACF;AACA;;;EACc,OAALW,KAAK,CAAChM,MAAD,EAASY,OAAT,EAAkB;IAC5B,MAAMqL,MAAM,GAAG,IAAIH,MAAJ,CAAWlL,OAAX,CAAf;IACA,OAAOqL,MAAM,CAACD,KAAP,CAAahM,MAAb,CAAP;EACD;EAED;AACF;AACA;;;EACoB,OAAXkM,WAAW,CAAClM,MAAD,EAASY,OAAT,EAAkB;IAClC,MAAMqL,MAAM,GAAG,IAAIH,MAAJ,CAAWlL,OAAX,CAAf;IACA,OAAOqL,MAAM,CAACC,WAAP,CAAmBlM,MAAnB,CAAP;EACD;EAED;AACF;AACA;;;EACEgM,KAAK,CAAChM,MAAD,EAAS6B,GAAG,GAAG,IAAf,EAAqB;IACxB,IAAIyG,GAAG,GAAG,EAAV;IAAA,IACEzL,CADF;IAAA,IAEE6H,CAFF;IAAA,IAGEC,CAHF;IAAA,IAIEwH,EAJF;IAAA,IAKEC,EALF;IAAA,IAME3O,GANF;IAAA,IAOE4O,IAPF;IAAA,IAQE9H,MARF;IAAA,IASEoG,IATF;IAAA,IAUE7K,KAVF;IAAA,IAWE8C,OAXF;IAAA,IAYEC,KAZF;IAAA,IAaEC,KAbF;IAAA,IAcEwJ,QAdF;IAAA,IAeEhI,IAfF;IAAA,IAgBEV,OAhBF;IAAA,IAiBED,IAjBF;IAAA,IAkBEmH,QAlBF;IAAA,IAmBEyB,GAnBF;IAqBA,MAAM/N,CAAC,GAAGwB,MAAM,CAAC/C,MAAjB;;IACA,KAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;MACtBiD,KAAK,GAAGE,MAAM,CAACnD,CAAD,CAAd,CADsB,CAGtB;;MACA,IAAI,KAAK+D,OAAL,CAAatI,UAAb,IAA2B,KAAKsI,OAAL,CAAatI,UAAb,CAAwBkU,SAAnD,IAAgE,KAAK5L,OAAL,CAAatI,UAAb,CAAwBkU,SAAxB,CAAkC1M,KAAK,CAACC,IAAxC,CAApE,EAAmH;QACjHwM,GAAG,GAAG,KAAK3L,OAAL,CAAatI,UAAb,CAAwBkU,SAAxB,CAAkC1M,KAAK,CAACC,IAAxC,EAA8C1C,IAA9C,CAAmD;UAAE4O,MAAM,EAAE;QAAV,CAAnD,EAAqEnM,KAArE,CAAN;;QACA,IAAIyM,GAAG,KAAK,KAAR,IAAiB,CAAC,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,MAA3B,EAAmC,OAAnC,EAA4C,YAA5C,EAA0D,MAA1D,EAAkE,MAAlE,EAA0E,WAA1E,EAAuF,MAAvF,EAA+FrC,QAA/F,CAAwGpK,KAAK,CAACC,IAA9G,CAAtB,EAA2I;UACzIuI,GAAG,IAAIiE,GAAG,IAAI,EAAd;UACA;QACD;MACF;;MAED,QAAQzM,KAAK,CAACC,IAAd;QACE,KAAK,OAAL;UAAc;YACZ;UACD;;QACD,KAAK,IAAL;UAAW;YACTuI,GAAG,IAAI,KAAKxP,QAAL,CAAc6I,EAAd,EAAP;YACA;UACD;;QACD,KAAK,SAAL;UAAgB;YACd2G,GAAG,IAAI,KAAKxP,QAAL,CAAc0I,OAAd,CACL,KAAK0K,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,CADK,EAELF,KAAK,CAAC4B,KAFD,EAGLlH,QAAQ,CAAC,KAAK0R,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,EAA+B,KAAK+L,YAApC,CAAD,CAHH,EAIL,KAAKvB,OAJA,CAAP;YAKA;UACD;;QACD,KAAK,MAAL;UAAa;YACXlC,GAAG,IAAI,KAAKxP,QAAL,CAAcoI,IAAd,CAAmBpB,KAAK,CAACH,IAAzB,EACLG,KAAK,CAACuB,IADD,EAELvB,KAAK,CAACjC,OAFD,CAAP;YAGA;UACD;;QACD,KAAK,OAAL;UAAc;YACZ0G,MAAM,GAAG,EAAT,CADY,CAGZ;;YACA8H,IAAI,GAAG,EAAP;YACAF,EAAE,GAAGrM,KAAK,CAACyE,MAAN,CAAatH,MAAlB;;YACA,KAAKyH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyH,EAAhB,EAAoBzH,CAAC,EAArB,EAAyB;cACvB2H,IAAI,IAAI,KAAKvT,QAAL,CAAcmS,SAAd,CACN,KAAKiB,WAAL,CAAiBpM,KAAK,CAACyE,MAAN,CAAaG,CAAb,EAAgB1E,MAAjC,CADM,EAEN;gBAAEuE,MAAM,EAAE,IAAV;gBAAgBC,KAAK,EAAE1E,KAAK,CAAC0E,KAAN,CAAYE,CAAZ;cAAvB,CAFM,CAAR;YAID;;YACDH,MAAM,IAAI,KAAKzL,QAAL,CAAciS,QAAd,CAAuBsB,IAAvB,CAAV;YAEA1B,IAAI,GAAG,EAAP;YACAwB,EAAE,GAAGrM,KAAK,CAAC2E,IAAN,CAAWxH,MAAhB;;YACA,KAAKyH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyH,EAAhB,EAAoBzH,CAAC,EAArB,EAAyB;cACvBjH,GAAG,GAAGqC,KAAK,CAAC2E,IAAN,CAAWC,CAAX,CAAN;cAEA2H,IAAI,GAAG,EAAP;cACAD,EAAE,GAAG3O,GAAG,CAACR,MAAT;;cACA,KAAK0H,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyH,EAAhB,EAAoBzH,CAAC,EAArB,EAAyB;gBACvB0H,IAAI,IAAI,KAAKvT,QAAL,CAAcmS,SAAd,CACN,KAAKiB,WAAL,CAAiBzO,GAAG,CAACkH,CAAD,CAAH,CAAO3E,MAAxB,CADM,EAEN;kBAAEuE,MAAM,EAAE,KAAV;kBAAiBC,KAAK,EAAE1E,KAAK,CAAC0E,KAAN,CAAYG,CAAZ;gBAAxB,CAFM,CAAR;cAID;;cAEDgG,IAAI,IAAI,KAAK7R,QAAL,CAAciS,QAAd,CAAuBsB,IAAvB,CAAR;YACD;;YACD/D,GAAG,IAAI,KAAKxP,QAAL,CAAcuL,KAAd,CAAoBE,MAApB,EAA4BoG,IAA5B,CAAP;YACA;UACD;;QACD,KAAK,YAAL;UAAmB;YACjBA,IAAI,GAAG,KAAKqB,KAAL,CAAWlM,KAAK,CAACE,MAAjB,CAAP;YACAsI,GAAG,IAAI,KAAKxP,QAAL,CAAc8I,UAAd,CAAyB+I,IAAzB,CAAP;YACA;UACD;;QACD,KAAK,MAAL;UAAa;YACX/H,OAAO,GAAG9C,KAAK,CAAC8C,OAAhB;YACAC,KAAK,GAAG/C,KAAK,CAAC+C,KAAd;YACAC,KAAK,GAAGhD,KAAK,CAACgD,KAAd;YACAqJ,EAAE,GAAGrM,KAAK,CAACiD,KAAN,CAAY9F,MAAjB;YAEA0N,IAAI,GAAG,EAAP;;YACA,KAAKjG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyH,EAAhB,EAAoBzH,CAAC,EAArB,EAAyB;cACvBJ,IAAI,GAAGxE,KAAK,CAACiD,KAAN,CAAY2B,CAAZ,CAAP;cACAd,OAAO,GAAGU,IAAI,CAACV,OAAf;cACAD,IAAI,GAAGW,IAAI,CAACX,IAAZ;cAEA2I,QAAQ,GAAG,EAAX;;cACA,IAAIhI,IAAI,CAACX,IAAT,EAAe;gBACbmH,QAAQ,GAAG,KAAKhS,QAAL,CAAcgS,QAAd,CAAuBlH,OAAvB,CAAX;;gBACA,IAAId,KAAJ,EAAW;kBACT,IAAIwB,IAAI,CAACtE,MAAL,CAAY/C,MAAZ,GAAqB,CAArB,IAA0BqH,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeD,IAAf,KAAwB,WAAtD,EAAmE;oBACjEuE,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeL,IAAf,GAAsBmL,QAAQ,GAAG,GAAX,GAAiBxG,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeL,IAAtD;;oBACA,IAAI2E,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeA,MAAf,IAAyBsE,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeA,MAAf,CAAsB/C,MAAtB,GAA+B,CAAxD,IAA6DqH,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeA,MAAf,CAAsB,CAAtB,EAAyBD,IAAzB,KAAkC,MAAnG,EAA2G;sBACzGuE,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeA,MAAf,CAAsB,CAAtB,EAAyBL,IAAzB,GAAgCmL,QAAQ,GAAG,GAAX,GAAiBxG,IAAI,CAACtE,MAAL,CAAY,CAAZ,EAAeA,MAAf,CAAsB,CAAtB,EAAyBL,IAA1E;oBACD;kBACF,CALD,MAKO;oBACL2E,IAAI,CAACtE,MAAL,CAAYyM,OAAZ,CAAoB;sBAClB1M,IAAI,EAAE,MADY;sBAElBJ,IAAI,EAAEmL;oBAFY,CAApB;kBAID;gBACF,CAZD,MAYO;kBACLwB,QAAQ,IAAIxB,QAAZ;gBACD;cACF;;cAEDwB,QAAQ,IAAI,KAAKN,KAAL,CAAW1H,IAAI,CAACtE,MAAhB,EAAwB8C,KAAxB,CAAZ;cACA6H,IAAI,IAAI,KAAK7R,QAAL,CAAc+R,QAAd,CAAuByB,QAAvB,EAAiC3I,IAAjC,EAAuCC,OAAvC,CAAR;YACD;;YAED0E,GAAG,IAAI,KAAKxP,QAAL,CAAciJ,IAAd,CAAmB4I,IAAnB,EAAyB/H,OAAzB,EAAkCC,KAAlC,CAAP;YACA;UACD;;QACD,KAAK,MAAL;UAAa;YACX;YACAyF,GAAG,IAAI,KAAKxP,QAAL,CAAcqB,IAAd,CAAmB2F,KAAK,CAACH,IAAzB,CAAP;YACA;UACD;;QACD,KAAK,WAAL;UAAkB;YAChB2I,GAAG,IAAI,KAAKxP,QAAL,CAAc+L,SAAd,CAAwB,KAAKqH,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,CAAxB,CAAP;YACA;UACD;;QACD,KAAK,MAAL;UAAa;YACX2K,IAAI,GAAG7K,KAAK,CAACE,MAAN,GAAe,KAAKkM,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,CAAf,GAAgDF,KAAK,CAACH,IAA7D;;YACA,OAAO9C,CAAC,GAAG,CAAJ,GAAQ2B,CAAR,IAAawB,MAAM,CAACnD,CAAC,GAAG,CAAL,CAAN,CAAckD,IAAd,KAAuB,MAA3C,EAAmD;cACjDD,KAAK,GAAGE,MAAM,CAAC,EAAEnD,CAAH,CAAd;cACA8N,IAAI,IAAI,QAAQ7K,KAAK,CAACE,MAAN,GAAe,KAAKkM,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,CAAf,GAAgDF,KAAK,CAACH,IAA9D,CAAR;YACD;;YACD2I,GAAG,IAAIzG,GAAG,GAAG,KAAK/I,QAAL,CAAc+L,SAAd,CAAwB8F,IAAxB,CAAH,GAAmCA,IAA7C;YACA;UACD;;QAED;UAAS;YACP,MAAMd,MAAM,GAAG,iBAAiB/J,KAAK,CAACC,IAAvB,GAA8B,uBAA7C;;YACA,IAAI,KAAKa,OAAL,CAAa3H,MAAjB,EAAyB;cACvB+F,OAAO,CAAC8K,KAAR,CAAcD,MAAd;cACA;YACD,CAHD,MAGO;cACL,MAAM,IAAIE,KAAJ,CAAUF,MAAV,CAAN;YACD;UACF;MA9HH;IAgID;;IAED,OAAOvB,GAAP;EACD;EAED;AACF;AACA;;;EACE4D,WAAW,CAAClM,MAAD,EAASlH,QAAT,EAAmB;IAC5BA,QAAQ,GAAGA,QAAQ,IAAI,KAAKA,QAA5B;IACA,IAAIwP,GAAG,GAAG,EAAV;IAAA,IACEzL,CADF;IAAA,IAEEiD,KAFF;IAAA,IAGEyM,GAHF;IAKA,MAAM/N,CAAC,GAAGwB,MAAM,CAAC/C,MAAjB;;IACA,KAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2B,CAAhB,EAAmB3B,CAAC,EAApB,EAAwB;MACtBiD,KAAK,GAAGE,MAAM,CAACnD,CAAD,CAAd,CADsB,CAGtB;;MACA,IAAI,KAAK+D,OAAL,CAAatI,UAAb,IAA2B,KAAKsI,OAAL,CAAatI,UAAb,CAAwBkU,SAAnD,IAAgE,KAAK5L,OAAL,CAAatI,UAAb,CAAwBkU,SAAxB,CAAkC1M,KAAK,CAACC,IAAxC,CAApE,EAAmH;QACjHwM,GAAG,GAAG,KAAK3L,OAAL,CAAatI,UAAb,CAAwBkU,SAAxB,CAAkC1M,KAAK,CAACC,IAAxC,EAA8C1C,IAA9C,CAAmD;UAAE4O,MAAM,EAAE;QAAV,CAAnD,EAAqEnM,KAArE,CAAN;;QACA,IAAIyM,GAAG,KAAK,KAAR,IAAiB,CAAC,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,QAApC,EAA8C,IAA9C,EAAoD,UAApD,EAAgE,IAAhE,EAAsE,KAAtE,EAA6E,MAA7E,EAAqFrC,QAArF,CAA8FpK,KAAK,CAACC,IAApG,CAAtB,EAAiI;UAC/HuI,GAAG,IAAIiE,GAAG,IAAI,EAAd;UACA;QACD;MACF;;MAED,QAAQzM,KAAK,CAACC,IAAd;QACE,KAAK,QAAL;UAAe;YACbuI,GAAG,IAAIxP,QAAQ,CAAC6G,IAAT,CAAcG,KAAK,CAACH,IAApB,CAAP;YACA;UACD;;QACD,KAAK,MAAL;UAAa;YACX2I,GAAG,IAAIxP,QAAQ,CAACqB,IAAT,CAAc2F,KAAK,CAACH,IAApB,CAAP;YACA;UACD;;QACD,KAAK,MAAL;UAAa;YACX2I,GAAG,IAAIxP,QAAQ,CAACyG,IAAT,CAAcO,KAAK,CAACjE,IAApB,EAA0BiE,KAAK,CAACJ,KAAhC,EAAuC,KAAKwM,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,EAA+BlH,QAA/B,CAAvC,CAAP;YACA;UACD;;QACD,KAAK,OAAL;UAAc;YACZwP,GAAG,IAAIxP,QAAQ,CAACqS,KAAT,CAAerL,KAAK,CAACjE,IAArB,EAA2BiE,KAAK,CAACJ,KAAjC,EAAwCI,KAAK,CAACH,IAA9C,CAAP;YACA;UACD;;QACD,KAAK,QAAL;UAAe;YACb2I,GAAG,IAAIxP,QAAQ,CAACkP,MAAT,CAAgB,KAAKkE,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,EAA+BlH,QAA/B,CAAhB,CAAP;YACA;UACD;;QACD,KAAK,IAAL;UAAW;YACTwP,GAAG,IAAIxP,QAAQ,CAACsP,EAAT,CAAY,KAAK8D,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,EAA+BlH,QAA/B,CAAZ,CAAP;YACA;UACD;;QACD,KAAK,UAAL;UAAiB;YACfwP,GAAG,IAAIxP,QAAQ,CAACwN,QAAT,CAAkBxG,KAAK,CAACH,IAAxB,CAAP;YACA;UACD;;QACD,KAAK,IAAL;UAAW;YACT2I,GAAG,IAAIxP,QAAQ,CAAC2N,EAAT,EAAP;YACA;UACD;;QACD,KAAK,KAAL;UAAY;YACV6B,GAAG,IAAIxP,QAAQ,CAAC4N,GAAT,CAAa,KAAKwF,WAAL,CAAiBpM,KAAK,CAACE,MAAvB,EAA+BlH,QAA/B,CAAb,CAAP;YACA;UACD;;QACD,KAAK,MAAL;UAAa;YACXwP,GAAG,IAAIxP,QAAQ,CAAC6G,IAAT,CAAcG,KAAK,CAACH,IAApB,CAAP;YACA;UACD;;QACD;UAAS;YACP,MAAMkK,MAAM,GAAG,iBAAiB/J,KAAK,CAACC,IAAvB,GAA8B,uBAA7C;;YACA,IAAI,KAAKa,OAAL,CAAa3H,MAAjB,EAAyB;cACvB+F,OAAO,CAAC8K,KAAR,CAAcD,MAAd;cACA;YACD,CAHD,MAGO;cACL,MAAM,IAAIE,KAAJ,CAAUF,MAAV,CAAN;YACD;UACF;MAjDH;IAmDD;;IACD,OAAOvB,GAAP;EACD;;AAjRU;AAoRb;AACA;AACA;;;AACA,SAASoE,MAAT,CAAgB5L,GAAhB,EAAqB1F,GAArB,EAA0BuR,QAA1B,EAAoC;EAClC;EACA,IAAI,OAAO7L,GAAP,KAAe,WAAf,IAA8BA,GAAG,KAAK,IAA1C,EAAgD;IAC9C,MAAM,IAAIiJ,KAAJ,CAAU,gDAAV,CAAN;EACD;;EACD,IAAI,OAAOjJ,GAAP,KAAe,QAAnB,EAA6B;IAC3B,MAAM,IAAIiJ,KAAJ,CAAU,0CACZ7M,MAAM,CAACC,SAAP,CAAiBsL,QAAjB,CAA0BpL,IAA1B,CAA+ByD,GAA/B,CADY,GAC0B,mBADpC,CAAN;EAED;;EAED,IAAI,OAAO1F,GAAP,KAAe,UAAnB,EAA+B;IAC7BuR,QAAQ,GAAGvR,GAAX;IACAA,GAAG,GAAG,IAAN;EACD;;EAEDA,GAAG,GAAGwB,KAAK,CAAC,EAAD,EAAK8P,MAAM,CAACpT,QAAZ,EAAsB8B,GAAG,IAAI,EAA7B,CAAX;EACA2D,wBAAwB,CAAC3D,GAAD,CAAxB;;EAEA,IAAIuR,QAAJ,EAAc;IACZ,MAAMjU,SAAS,GAAG0C,GAAG,CAAC1C,SAAtB;IACA,IAAIsH,MAAJ;;IAEA,IAAI;MACFA,MAAM,GAAG0I,KAAK,CAACG,GAAN,CAAU/H,GAAV,EAAe1F,GAAf,CAAT;IACD,CAFD,CAEE,OAAOY,CAAP,EAAU;MACV,OAAO2Q,QAAQ,CAAC3Q,CAAD,CAAf;IACD;;IAED,MAAM4Q,IAAI,GAAG,UAASC,GAAT,EAAc;MACzB,IAAIvE,GAAJ;;MAEA,IAAI,CAACuE,GAAL,EAAU;QACR,IAAI;UACF,IAAIzR,GAAG,CAAChC,UAAR,EAAoB;YAClBsT,MAAM,CAACtT,UAAP,CAAkB4G,MAAlB,EAA0B5E,GAAG,CAAChC,UAA9B;UACD;;UACDkP,GAAG,GAAGwD,MAAM,CAACE,KAAP,CAAahM,MAAb,EAAqB5E,GAArB,CAAN;QACD,CALD,CAKE,OAAOY,CAAP,EAAU;UACV6Q,GAAG,GAAG7Q,CAAN;QACD;MACF;;MAEDZ,GAAG,CAAC1C,SAAJ,GAAgBA,SAAhB;MAEA,OAAOmU,GAAG,GACNF,QAAQ,CAACE,GAAD,CADF,GAENF,QAAQ,CAAC,IAAD,EAAOrE,GAAP,CAFZ;IAGD,CAnBD;;IAqBA,IAAI,CAAC5P,SAAD,IAAcA,SAAS,CAACuE,MAAV,GAAmB,CAArC,EAAwC;MACtC,OAAO2P,IAAI,EAAX;IACD;;IAED,OAAOxR,GAAG,CAAC1C,SAAX;IAEA,IAAI,CAACsH,MAAM,CAAC/C,MAAZ,EAAoB,OAAO2P,IAAI,EAAX;IAEpB,IAAIE,OAAO,GAAG,CAAd;IACAJ,MAAM,CAACtT,UAAP,CAAkB4G,MAAlB,EAA0B,UAASF,KAAT,EAAgB;MACxC,IAAIA,KAAK,CAACC,IAAN,KAAe,MAAnB,EAA2B;QACzB+M,OAAO;QACPC,UAAU,CAAC,MAAM;UACfrU,SAAS,CAACoH,KAAK,CAACH,IAAP,EAAaG,KAAK,CAACuB,IAAnB,EAAyB,UAASwL,GAAT,EAAc3L,IAAd,EAAoB;YACpD,IAAI2L,GAAJ,EAAS;cACP,OAAOD,IAAI,CAACC,GAAD,CAAX;YACD;;YACD,IAAI3L,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAKpB,KAAK,CAACH,IAAnC,EAAyC;cACvCG,KAAK,CAACH,IAAN,GAAauB,IAAb;cACApB,KAAK,CAACjC,OAAN,GAAgB,IAAhB;YACD;;YAEDiP,OAAO;;YACP,IAAIA,OAAO,KAAK,CAAhB,EAAmB;cACjBF,IAAI;YACL;UACF,CAbQ,CAAT;QAcD,CAfS,EAeP,CAfO,CAAV;MAgBD;IACF,CApBD;;IAsBA,IAAIE,OAAO,KAAK,CAAhB,EAAmB;MACjBF,IAAI;IACL;;IAED;EACD;;EAED,SAASI,OAAT,CAAiBhR,CAAjB,EAAoB;IAClBA,CAAC,CAACiR,OAAF,IAAa,6DAAb;;IACA,IAAI7R,GAAG,CAACnC,MAAR,EAAgB;MACd,OAAO,mCACHiB,MAAM,CAAC8B,CAAC,CAACiR,OAAF,GAAY,EAAb,EAAiB,IAAjB,CADH,GAEH,QAFJ;IAGD;;IACD,MAAMjR,CAAN;EACD;;EAED,IAAI;IACF,MAAMgE,MAAM,GAAG0I,KAAK,CAACG,GAAN,CAAU/H,GAAV,EAAe1F,GAAf,CAAf;;IACA,IAAIA,GAAG,CAAChC,UAAR,EAAoB;MAClB,IAAIgC,GAAG,CAACjD,KAAR,EAAe;QACb,OAAO+U,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACtT,UAAP,CAAkB4G,MAAlB,EAA0B5E,GAAG,CAAChC,UAA9B,CAAZ,EACJgU,IADI,CACC,MAAM;UACV,OAAOtB,MAAM,CAACE,KAAP,CAAahM,MAAb,EAAqB5E,GAArB,CAAP;QACD,CAHI,EAIJiS,KAJI,CAIEL,OAJF,CAAP;MAKD;;MACDN,MAAM,CAACtT,UAAP,CAAkB4G,MAAlB,EAA0B5E,GAAG,CAAChC,UAA9B;IACD;;IACD,OAAO0S,MAAM,CAACE,KAAP,CAAahM,MAAb,EAAqB5E,GAArB,CAAP;EACD,CAbD,CAaE,OAAOY,CAAP,EAAU;IACVgR,OAAO,CAAChR,CAAD,CAAP;EACD;AACF;AAED;AACA;AACA;;;AAEA0Q,MAAM,CAAC9L,OAAP,GACA8L,MAAM,CAACY,UAAP,GAAoB,UAASlS,GAAT,EAAc;EAChCwB,KAAK,CAAC8P,MAAM,CAACpT,QAAR,EAAkB8B,GAAlB,CAAL;EACA7B,cAAc,CAACmT,MAAM,CAACpT,QAAR,CAAd;EACA,OAAOoT,MAAP;AACD,CALD;;AAOAA,MAAM,CAACxU,WAAP,GAAqBA,WAArB;AAEAwU,MAAM,CAACpT,QAAP,GAAkBA,QAAlB;AAEA;AACA;AACA;;AAEAoT,MAAM,CAACa,GAAP,GAAa,UAAS,GAAGC,IAAZ,EAAkB;EAC7B,MAAMlV,UAAU,GAAGoU,MAAM,CAACpT,QAAP,CAAgBhB,UAAhB,IAA8B;IAAEkU,SAAS,EAAE,EAAb;IAAiBiB,WAAW,EAAE;EAA9B,CAAjD;EAEAD,IAAI,CAAC7D,OAAL,CAAc+D,IAAD,IAAU;IACrB;IACA,MAAMC,IAAI,GAAG/Q,KAAK,CAAC,EAAD,EAAK8Q,IAAL,CAAlB,CAFqB,CAIrB;;IACAC,IAAI,CAACxV,KAAL,GAAauU,MAAM,CAACpT,QAAP,CAAgBnB,KAAhB,IAAyBwV,IAAI,CAACxV,KAA3C,CALqB,CAOrB;;IACA,IAAIuV,IAAI,CAACpV,UAAT,EAAqB;MACnBoV,IAAI,CAACpV,UAAL,CAAgBqR,OAAhB,CAAyBiE,GAAD,IAAS;QAC/B,IAAI,CAACA,GAAG,CAACtS,IAAT,EAAe;UACb,MAAM,IAAIyO,KAAJ,CAAU,yBAAV,CAAN;QACD;;QACD,IAAI6D,GAAG,CAAC9U,QAAR,EAAkB;UAAE;UAClB,MAAM+U,YAAY,GAAGvV,UAAU,CAACkU,SAAX,CAAqBoB,GAAG,CAACtS,IAAzB,CAArB;;UACA,IAAIuS,YAAJ,EAAkB;YAChB;YACAvV,UAAU,CAACkU,SAAX,CAAqBoB,GAAG,CAACtS,IAAzB,IAAiC,UAAS,GAAGkS,IAAZ,EAAkB;cACjD,IAAIjB,GAAG,GAAGqB,GAAG,CAAC9U,QAAJ,CAAagV,KAAb,CAAmB,IAAnB,EAAyBN,IAAzB,CAAV;;cACA,IAAIjB,GAAG,KAAK,KAAZ,EAAmB;gBACjBA,GAAG,GAAGsB,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBN,IAAzB,CAAN;cACD;;cACD,OAAOjB,GAAP;YACD,CAND;UAOD,CATD,MASO;YACLjU,UAAU,CAACkU,SAAX,CAAqBoB,GAAG,CAACtS,IAAzB,IAAiCsS,GAAG,CAAC9U,QAArC;UACD;QACF;;QACD,IAAI8U,GAAG,CAACzU,SAAR,EAAmB;UAAE;UACnB,IAAI,CAACyU,GAAG,CAAC9O,KAAL,IAAe8O,GAAG,CAAC9O,KAAJ,KAAc,OAAd,IAAyB8O,GAAG,CAAC9O,KAAJ,KAAc,QAA1D,EAAqE;YACnE,MAAM,IAAIiL,KAAJ,CAAU,6CAAV,CAAN;UACD;;UACD,IAAIzR,UAAU,CAACsV,GAAG,CAAC9O,KAAL,CAAd,EAA2B;YACzBxG,UAAU,CAACsV,GAAG,CAAC9O,KAAL,CAAV,CAAsB2N,OAAtB,CAA8BmB,GAAG,CAACzU,SAAlC;UACD,CAFD,MAEO;YACLb,UAAU,CAACsV,GAAG,CAAC9O,KAAL,CAAV,GAAwB,CAAC8O,GAAG,CAACzU,SAAL,CAAxB;UACD;;UACD,IAAIyU,GAAG,CAAC/K,KAAR,EAAe;YAAE;YACf,IAAI+K,GAAG,CAAC9O,KAAJ,KAAc,OAAlB,EAA2B;cACzB,IAAIxG,UAAU,CAACgR,UAAf,EAA2B;gBACzBhR,UAAU,CAACgR,UAAX,CAAsBjL,IAAtB,CAA2BuP,GAAG,CAAC/K,KAA/B;cACD,CAFD,MAEO;gBACLvK,UAAU,CAACgR,UAAX,GAAwB,CAACsE,GAAG,CAAC/K,KAAL,CAAxB;cACD;YACF,CAND,MAMO,IAAI+K,GAAG,CAAC9O,KAAJ,KAAc,QAAlB,EAA4B;cACjC,IAAIxG,UAAU,CAAC8R,WAAf,EAA4B;gBAC1B9R,UAAU,CAAC8R,WAAX,CAAuB/L,IAAvB,CAA4BuP,GAAG,CAAC/K,KAAhC;cACD,CAFD,MAEO;gBACLvK,UAAU,CAAC8R,WAAX,GAAyB,CAACwD,GAAG,CAAC/K,KAAL,CAAzB;cACD;YACF;UACF;QACF;;QACD,IAAI+K,GAAG,CAACH,WAAR,EAAqB;UAAE;UACrBnV,UAAU,CAACmV,WAAX,CAAuBG,GAAG,CAACtS,IAA3B,IAAmCsS,GAAG,CAACH,WAAvC;QACD;MACF,CA/CD;MAgDAE,IAAI,CAACrV,UAAL,GAAkBA,UAAlB;IACD,CA1DoB,CA4DrB;;;IACA,IAAIoV,IAAI,CAAC5U,QAAT,EAAmB;MACjB,MAAMA,QAAQ,GAAG4T,MAAM,CAACpT,QAAP,CAAgBR,QAAhB,IAA4B,IAAIuR,QAAJ,EAA7C;;MACA,KAAK,MAAM0D,IAAX,IAAmBL,IAAI,CAAC5U,QAAxB,EAAkC;QAChC,MAAM+U,YAAY,GAAG/U,QAAQ,CAACiV,IAAD,CAA7B,CADgC,CAEhC;;QACAjV,QAAQ,CAACiV,IAAD,CAAR,GAAiB,CAAC,GAAGP,IAAJ,KAAa;UAC5B,IAAIjB,GAAG,GAAGmB,IAAI,CAAC5U,QAAL,CAAciV,IAAd,EAAoBD,KAApB,CAA0BhV,QAA1B,EAAoC0U,IAApC,CAAV;;UACA,IAAIjB,GAAG,KAAK,KAAZ,EAAmB;YACjBA,GAAG,GAAGsB,YAAY,CAACC,KAAb,CAAmBhV,QAAnB,EAA6B0U,IAA7B,CAAN;UACD;;UACD,OAAOjB,GAAP;QACD,CAND;MAOD;;MACDoB,IAAI,CAAC7U,QAAL,GAAgBA,QAAhB;IACD;;IACD,IAAI4U,IAAI,CAACvU,SAAT,EAAoB;MAClB,MAAMA,SAAS,GAAGuT,MAAM,CAACpT,QAAP,CAAgBH,SAAhB,IAA6B,IAAIuH,SAAJ,EAA/C;;MACA,KAAK,MAAMqN,IAAX,IAAmBL,IAAI,CAACvU,SAAxB,EAAmC;QACjC,MAAM6U,aAAa,GAAG7U,SAAS,CAAC4U,IAAD,CAA/B,CADiC,CAEjC;;QACA5U,SAAS,CAAC4U,IAAD,CAAT,GAAkB,CAAC,GAAGP,IAAJ,KAAa;UAC7B,IAAIjB,GAAG,GAAGmB,IAAI,CAACvU,SAAL,CAAe4U,IAAf,EAAqBD,KAArB,CAA2B3U,SAA3B,EAAsCqU,IAAtC,CAAV;;UACA,IAAIjB,GAAG,KAAK,KAAZ,EAAmB;YACjBA,GAAG,GAAGyB,aAAa,CAACF,KAAd,CAAoB3U,SAApB,EAA+BqU,IAA/B,CAAN;UACD;;UACD,OAAOjB,GAAP;QACD,CAND;MAOD;;MACDoB,IAAI,CAACxU,SAAL,GAAiBA,SAAjB;IACD,CA1FoB,CA4FrB;;;IACA,IAAIuU,IAAI,CAACtU,UAAT,EAAqB;MACnB,MAAMA,UAAU,GAAGsT,MAAM,CAACpT,QAAP,CAAgBF,UAAnC;;MACAuU,IAAI,CAACvU,UAAL,GAAkB,UAAS0G,KAAT,EAAgB;QAChC,IAAImO,MAAM,GAAG,EAAb;QACAA,MAAM,CAAC5P,IAAP,CAAYqP,IAAI,CAACtU,UAAL,CAAgBiE,IAAhB,CAAqB,IAArB,EAA2ByC,KAA3B,CAAZ;;QACA,IAAI1G,UAAJ,EAAgB;UACd6U,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAc9U,UAAU,CAACiE,IAAX,CAAgB,IAAhB,EAAsByC,KAAtB,CAAd,CAAT;QACD;;QACD,OAAOmO,MAAP;MACD,CAPD;IAQD;;IAEDvB,MAAM,CAACY,UAAP,CAAkBK,IAAlB;EACD,CA1GD;AA2GD,CA9GD;AAgHA;AACA;AACA;;;AAEAjB,MAAM,CAACtT,UAAP,GAAoB,UAAS4G,MAAT,EAAiB2M,QAAjB,EAA2B;EAC7C,IAAIsB,MAAM,GAAG,EAAb;;EACA,KAAK,MAAMnO,KAAX,IAAoBE,MAApB,EAA4B;IAC1BiO,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcvB,QAAQ,CAACtP,IAAT,CAAcqP,MAAd,EAAsB5M,KAAtB,CAAd,CAAT;;IACA,QAAQA,KAAK,CAACC,IAAd;MACE,KAAK,OAAL;QAAc;UACZ,KAAK,MAAMsM,IAAX,IAAmBvM,KAAK,CAACyE,MAAzB,EAAiC;YAC/B0J,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcxB,MAAM,CAACtT,UAAP,CAAkBiT,IAAI,CAACrM,MAAvB,EAA+B2M,QAA/B,CAAd,CAAT;UACD;;UACD,KAAK,MAAMlP,GAAX,IAAkBqC,KAAK,CAAC2E,IAAxB,EAA8B;YAC5B,KAAK,MAAM4H,IAAX,IAAmB5O,GAAnB,EAAwB;cACtBwQ,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcxB,MAAM,CAACtT,UAAP,CAAkBiT,IAAI,CAACrM,MAAvB,EAA+B2M,QAA/B,CAAd,CAAT;YACD;UACF;;UACD;QACD;;MACD,KAAK,MAAL;QAAa;UACXsB,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcxB,MAAM,CAACtT,UAAP,CAAkB0G,KAAK,CAACiD,KAAxB,EAA+B4J,QAA/B,CAAd,CAAT;UACA;QACD;;MACD;QAAS;UACP,IAAID,MAAM,CAACpT,QAAP,CAAgBhB,UAAhB,IAA8BoU,MAAM,CAACpT,QAAP,CAAgBhB,UAAhB,CAA2BmV,WAAzD,IAAwEf,MAAM,CAACpT,QAAP,CAAgBhB,UAAhB,CAA2BmV,WAA3B,CAAuC3N,KAAK,CAACC,IAA7C,CAA5E,EAAgI;YAAE;YAChI2M,MAAM,CAACpT,QAAP,CAAgBhB,UAAhB,CAA2BmV,WAA3B,CAAuC3N,KAAK,CAACC,IAA7C,EAAmD4J,OAAnD,CAA2D,UAAS8D,WAAT,EAAsB;cAC/EQ,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcxB,MAAM,CAACtT,UAAP,CAAkB0G,KAAK,CAAC2N,WAAD,CAAvB,EAAsCd,QAAtC,CAAd,CAAT;YACD,CAFD;UAGD,CAJD,MAIO,IAAI7M,KAAK,CAACE,MAAV,EAAkB;YACvBiO,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcxB,MAAM,CAACtT,UAAP,CAAkB0G,KAAK,CAACE,MAAxB,EAAgC2M,QAAhC,CAAd,CAAT;UACD;QACF;IAxBH;EA0BD;;EACD,OAAOsB,MAAP;AACD,CAhCD;AAkCA;AACA;AACA;AACA;;;AACAvB,MAAM,CAACR,WAAP,GAAqB,UAASpL,GAAT,EAAc1F,GAAd,EAAmB;EACtC;EACA,IAAI,OAAO0F,GAAP,KAAe,WAAf,IAA8BA,GAAG,KAAK,IAA1C,EAAgD;IAC9C,MAAM,IAAIiJ,KAAJ,CAAU,4DAAV,CAAN;EACD;;EACD,IAAI,OAAOjJ,GAAP,KAAe,QAAnB,EAA6B;IAC3B,MAAM,IAAIiJ,KAAJ,CAAU,sDACZ7M,MAAM,CAACC,SAAP,CAAiBsL,QAAjB,CAA0BpL,IAA1B,CAA+ByD,GAA/B,CADY,GAC0B,mBADpC,CAAN;EAED;;EAED1F,GAAG,GAAGwB,KAAK,CAAC,EAAD,EAAK8P,MAAM,CAACpT,QAAZ,EAAsB8B,GAAG,IAAI,EAA7B,CAAX;EACA2D,wBAAwB,CAAC3D,GAAD,CAAxB;;EAEA,IAAI;IACF,MAAM4E,MAAM,GAAG0I,KAAK,CAACI,SAAN,CAAgBhI,GAAhB,EAAqB1F,GAArB,CAAf;;IACA,IAAIA,GAAG,CAAChC,UAAR,EAAoB;MAClBsT,MAAM,CAACtT,UAAP,CAAkB4G,MAAlB,EAA0B5E,GAAG,CAAChC,UAA9B;IACD;;IACD,OAAO0S,MAAM,CAACI,WAAP,CAAmBlM,MAAnB,EAA2B5E,GAA3B,CAAP;EACD,CAND,CAME,OAAOY,CAAP,EAAU;IACVA,CAAC,CAACiR,OAAF,IAAa,6DAAb;;IACA,IAAI7R,GAAG,CAACnC,MAAR,EAAgB;MACd,OAAO,mCACHiB,MAAM,CAAC8B,CAAC,CAACiR,OAAF,GAAY,EAAb,EAAiB,IAAjB,CADH,GAEH,QAFJ;IAGD;;IACD,MAAMjR,CAAN;EACD;AACF,CA5BD;AA8BA;AACA;AACA;;;AACA0Q,MAAM,CAACZ,MAAP,GAAgBA,MAAhB;AACAY,MAAM,CAACT,MAAP,GAAgBH,MAAM,CAACE,KAAvB;AACAU,MAAM,CAACrC,QAAP,GAAkBA,QAAlB;AACAqC,MAAM,CAACtB,YAAP,GAAsBA,YAAtB;AACAsB,MAAM,CAAChE,KAAP,GAAeA,KAAf;AACAgE,MAAM,CAACjN,KAAP,GAAeiJ,KAAK,CAACG,GAArB;AACA6D,MAAM,CAAChM,SAAP,GAAmBA,SAAnB;AACAgM,MAAM,CAACrB,OAAP,GAAiBA,OAAjB;AACAqB,MAAM,CAACV,KAAP,GAAeU,MAAf;AAEA,MAAM9L,OAAO,GAAG8L,MAAM,CAAC9L,OAAvB;AACA,MAAM0M,UAAU,GAAGZ,MAAM,CAACY,UAA1B;AACA,MAAMC,GAAG,GAAGb,MAAM,CAACa,GAAnB;AACA,MAAMnU,UAAU,GAAGsT,MAAM,CAACtT,UAA1B;AACA,MAAM8S,WAAW,GAAGQ,MAAM,CAACR,WAA3B;AACA,MAAMF,KAAK,GAAGU,MAAd;AACA,MAAMT,MAAM,GAAGH,MAAM,CAACE,KAAtB;AACA,MAAMvM,KAAK,GAAGiJ,KAAK,CAACG,GAApB;AAEA,SAASH,KAAT,EAAgBoD,MAAhB,EAAwBzB,QAAxB,EAAkCgB,OAAlC,EAA2CD,YAA3C,EAAyD1K,SAAzD,EAAoEpH,QAApE,EAA8EpB,WAA9E,EAA2FuH,KAA3F,EAAkGiN,MAAlG,EAA0G9L,OAA1G,EAAmHoL,KAAnH,EAA0HE,WAA1H,EAAuID,MAAvI,EAA+IqB,UAA/I,EAA2JC,GAA3J,EAAgKnU,UAAhK"},"metadata":{},"sourceType":"module"}